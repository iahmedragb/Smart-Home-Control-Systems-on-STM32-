
Smart_Home_G2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a74  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002a354  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cf5c  0802cf5c  00041364  2**0
                  CONTENTS
  4 .ARM          00000000  0802cf5c  0802cf5c  00041364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802cf5c  0802cf5c  00041364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802cf5c  0802cf5c  0003cf5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802cf60  0802cf60  0003cf60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001364  20000000  0802cf64  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20001364  0802e2c8  00041364  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001450  0802e2c8  00041450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00041364  2**0
                  CONTENTS, READONLY
 12 .debug_info   000042ca  00000000  00000000  00041394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001289  00000000  00000000  0004565e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000570  00000000  00000000  000468e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000478  00000000  00000000  00046e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e1f  00000000  00000000  000472d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002998  00000000  00000000  000490ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008181  00000000  00000000  0004ba87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00053c08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012a0  00000000  00000000  00053c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20001364 	.word	0x20001364
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002bf0 	.word	0x08002bf0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20001368 	.word	0x20001368
 80001d0:	08002bf0 	.word	0x08002bf0

080001d4 <AC_Init>:


/*====================================================   Start_FUNCTION   ====================================================*/
u8 AC_RequiredTemp;
void AC_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	/*Enable Interrupt*/
	/*Enable Peripheral*/
	RCC_vEnableClock(APB2_BUS,PERIPHERAL_EN_ADC1 );
 80001d8:	2108      	movs	r1, #8
 80001da:	2003      	movs	r0, #3
 80001dc:	f001 f8f8 	bl	80013d0 <RCC_vEnableClock>
	/*ADC Channel*/
	GPIO_vSetMode(TEMPERATURE_SENSOR_PORT, TEMPERATURE_SENSOR_PIN, GPIO_Analog);
 80001e0:	2203      	movs	r2, #3
 80001e2:	2101      	movs	r1, #1
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 f955 	bl	8000494 <GPIO_vSetMode>
	/*Motor */
	GPIO_vSetMode(AIR_COND_MOTOR_PORT, AIR_COND_MOTOR_PIN, GPIO_Output);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2108      	movs	r1, #8
 80001ee:	2003      	movs	r0, #3
 80001f0:	f000 f950 	bl	8000494 <GPIO_vSetMode>
	/*Initialize ADC*/
	ADC_Init();
 80001f4:	f000 f834 	bl	8000260 <ADC_Init>
	ADC_AdjustValue(&AC_RequiredTemp,AC_On, AC_Off);
 80001f8:	4a05      	ldr	r2, [pc, #20]	; (8000210 <AC_Init+0x3c>)
 80001fa:	4906      	ldr	r1, [pc, #24]	; (8000214 <AC_Init+0x40>)
 80001fc:	4806      	ldr	r0, [pc, #24]	; (8000218 <AC_Init+0x44>)
 80001fe:	f000 f84f 	bl	80002a0 <ADC_AdjustValue>
	/*Systick Interval*/
	/*In this case stop continous conversion in ADC*/
	//STK_PeriodicCallBackMs(1000, AC_TempRead);
	NVIC_EnableIRQ(ADC_IRQn);
 8000202:	2012      	movs	r0, #18
 8000204:	f001 f89c 	bl	8001340 <NVIC_EnableIRQ>
	ADC_Start();
 8000208:	f000 f870 	bl	80002ec <ADC_Start>
}
 800020c:	bf00      	nop
 800020e:	bd80      	pop	{r7, pc}
 8000210:	0800022f 	.word	0x0800022f
 8000214:	0800021d 	.word	0x0800021d
 8000218:	20001380 	.word	0x20001380

0800021c <AC_On>:

void AC_On(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	/*Motor ON*/
	GPIO_vWritePinValue(AIR_COND_MOTOR_PORT, AIR_COND_MOTOR_PIN, HighState);
 8000220:	2201      	movs	r2, #1
 8000222:	2108      	movs	r1, #8
 8000224:	2003      	movs	r0, #3
 8000226:	f000 fbad 	bl	8000984 <GPIO_vWritePinValue>
}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}

0800022e <AC_Off>:
void AC_Off(void)
{
 800022e:	b580      	push	{r7, lr}
 8000230:	af00      	add	r7, sp, #0
	/*Motor OFF*/
	GPIO_vWritePinValue(AIR_COND_MOTOR_PORT, AIR_COND_MOTOR_PIN, LowState);
 8000232:	2200      	movs	r2, #0
 8000234:	2108      	movs	r1, #8
 8000236:	2003      	movs	r0, #3
 8000238:	f000 fba4 	bl	8000984 <GPIO_vWritePinValue>

}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}

08000240 <AC_AdjustTemperature>:
void AC_AdjustTemperature(u8 RequiredTemp)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
	/*Change Reference Temperature*/
	AC_RequiredTemp=RequiredTemp;
 800024a:	4a04      	ldr	r2, [pc, #16]	; (800025c <AC_AdjustTemperature+0x1c>)
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	7013      	strb	r3, [r2, #0]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	20001380 	.word	0x20001380

08000260 <ADC_Init>:
static void (*ADC_pAppFunStop)(void)=NULL;
u8 read;
u8 RequiredRegisterValue;
/*====================================================   Start_FUNCTION   ====================================================*/
void ADC_Init(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
	ADC1->CR1 |= ADC_CR1_EOCIE;		//interrupt enable on end of conv.
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <ADC_Init+0x38>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	4a0b      	ldr	r2, [pc, #44]	; (8000298 <ADC_Init+0x38>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6053      	str	r3, [r2, #4]
	//ADC1->CR1 |= ADC_CR1_RES_12;	//Resolution
	//ADC1->CR2 |= (1U<<1); //Cont. Conv.
	ADC1->SQR1 = 0; //Sequence Length
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <ADC_Init+0x38>)
 8000272:	2200      	movs	r2, #0
 8000274:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR3 |=(1U<<0);	//channel 1 is first in sequence
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <ADC_Init+0x38>)
 8000278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800027a:	4a07      	ldr	r2, [pc, #28]	; (8000298 <ADC_Init+0x38>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1_COMMON->CCR |= (3U<<0);
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <ADC_Init+0x3c>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	4a05      	ldr	r2, [pc, #20]	; (800029c <ADC_Init+0x3c>)
 8000288:	f043 0303 	orr.w	r3, r3, #3
 800028c:	6053      	str	r3, [r2, #4]


}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40012000 	.word	0x40012000
 800029c:	40012300 	.word	0x40012300

080002a0 <ADC_AdjustValue>:
void ADC_AdjustValue(u8 *RequiredValue,void(*pAppFunStart)(void),void(*pAppFunStop)(void))
{
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
	if((pAppFunStart!=NULL)&&(pAppFunStop!=NULL))
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d00e      	beq.n	80002d0 <ADC_AdjustValue+0x30>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <ADC_AdjustValue+0x30>
		{
			ADC_pAppFunStart=pAppFunStart;
 80002b8:	4a08      	ldr	r2, [pc, #32]	; (80002dc <ADC_AdjustValue+0x3c>)
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	6013      	str	r3, [r2, #0]
			ADC_pAppFunStop=pAppFunStop;
 80002be:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <ADC_AdjustValue+0x40>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	6013      	str	r3, [r2, #0]
			ADC_CurrentAppState=OFF_STATE;
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <ADC_AdjustValue+0x44>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
			ADC_RequiredValue=RequiredValue;
 80002ca:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <ADC_AdjustValue+0x48>)
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	6013      	str	r3, [r2, #0]
		}else
		{
			//error
		}

}
 80002d0:	bf00      	nop
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	2000138c 	.word	0x2000138c
 80002e0:	20001390 	.word	0x20001390
 80002e4:	20001388 	.word	0x20001388
 80002e8:	20001384 	.word	0x20001384

080002ec <ADC_Start>:
void ADC_Start(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	ADC1->CR2 |= 1U ;	//adc ON
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <ADC_Start+0x28>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a07      	ldr	r2, [pc, #28]	; (8000314 <ADC_Start+0x28>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (1U<<30);//start
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <ADC_Start+0x28>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <ADC_Start+0x28>)
 8000302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000306:	6093      	str	r3, [r2, #8]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40012000 	.word	0x40012000

08000318 <ADC_IRQHandler>:

	return (ADC1->DR);
}

void ADC_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	read=(ADC1->DR)/8;
 800031c:	4b19      	ldr	r3, [pc, #100]	; (8000384 <ADC_IRQHandler+0x6c>)
 800031e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000320:	08db      	lsrs	r3, r3, #3
 8000322:	b2da      	uxtb	r2, r3
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <ADC_IRQHandler+0x70>)
 8000326:	701a      	strb	r2, [r3, #0]

	RequiredRegisterValue = (*ADC_RequiredValue);
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <ADC_IRQHandler+0x74>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	781a      	ldrb	r2, [r3, #0]
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <ADC_IRQHandler+0x78>)
 8000330:	701a      	strb	r2, [r3, #0]
	if((read >RequiredRegisterValue) &&(ADC_CurrentAppState == OFF_STATE))
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <ADC_IRQHandler+0x70>)
 8000334:	781a      	ldrb	r2, [r3, #0]
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <ADC_IRQHandler+0x78>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d90a      	bls.n	8000354 <ADC_IRQHandler+0x3c>
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <ADC_IRQHandler+0x7c>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d106      	bne.n	8000354 <ADC_IRQHandler+0x3c>
	{
		ADC_pAppFunStart();
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <ADC_IRQHandler+0x80>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4798      	blx	r3
		ADC_CurrentAppState = ON_STATE;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <ADC_IRQHandler+0x7c>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
 8000352:	e00f      	b.n	8000374 <ADC_IRQHandler+0x5c>
	}else if((read <= RequiredRegisterValue)&&(ADC_CurrentAppState == ON_STATE))
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <ADC_IRQHandler+0x70>)
 8000356:	781a      	ldrb	r2, [r3, #0]
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <ADC_IRQHandler+0x78>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	429a      	cmp	r2, r3
 800035e:	d809      	bhi.n	8000374 <ADC_IRQHandler+0x5c>
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <ADC_IRQHandler+0x7c>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d105      	bne.n	8000374 <ADC_IRQHandler+0x5c>
	{
		ADC_pAppFunStop();
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <ADC_IRQHandler+0x84>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4798      	blx	r3
		ADC_CurrentAppState = OFF_STATE;
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <ADC_IRQHandler+0x7c>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
	}
	ADC1->CR2 |= (1U<<30);//start
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <ADC_IRQHandler+0x6c>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	4a02      	ldr	r2, [pc, #8]	; (8000384 <ADC_IRQHandler+0x6c>)
 800037a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800037e:	6093      	str	r3, [r2, #8]

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40012000 	.word	0x40012000
 8000388:	20001394 	.word	0x20001394
 800038c:	20001384 	.word	0x20001384
 8000390:	20001395 	.word	0x20001395
 8000394:	20001388 	.word	0x20001388
 8000398:	2000138c 	.word	0x2000138c
 800039c:	20001390 	.word	0x20001390

080003a0 <Door_Init>:
/*======================================*/

/*===========  INCLUDE HAL   ===========*/

void Door_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	GPIO_vSetMode(DOOR_PORT,DOOR_PIN, GPIO_Output);
 80003a4:	2201      	movs	r2, #1
 80003a6:	210e      	movs	r1, #14
 80003a8:	2000      	movs	r0, #0
 80003aa:	f000 f873 	bl	8000494 <GPIO_vSetMode>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
	...

080003b4 <Door_Control>:

void Door_Control(u8 Door_State)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	STK_PWM(50, Door_State, pwm);
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <Door_Control+0x20>)
 80003c4:	4619      	mov	r1, r3
 80003c6:	2032      	movs	r0, #50	; 0x32
 80003c8:	f001 f95a 	bl	8001680 <STK_PWM>

}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	080003d9 	.word	0x080003d9

080003d8 <pwm>:
void pwm(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	static u32 counter;
	counter++;
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <pwm+0x28>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3301      	adds	r3, #1
 80003e2:	4a07      	ldr	r2, [pc, #28]	; (8000400 <pwm+0x28>)
 80003e4:	6013      	str	r3, [r2, #0]
	GPIO_vTogglePinValue(DOOR_PORT, DOOR_PIN);
 80003e6:	210e      	movs	r1, #14
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 fc29 	bl	8000c40 <GPIO_vTogglePinValue>
	if(counter==2)
 80003ee:	4b04      	ldr	r3, [pc, #16]	; (8000400 <pwm+0x28>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b02      	cmp	r3, #2
 80003f4:	d101      	bne.n	80003fa <pwm+0x22>
	{
		STK_Stop();
 80003f6:	f001 f8c9 	bl	800158c <STK_Stop>
		//GPIO_vTogglePinValue(DOOR_PORT, DOOR_PIN);
	}
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20001398 	.word	0x20001398

08000404 <EXTI0_IRQHandler>:
}
/*====================================================   END_ FUNCTION   ====================================================*/

/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI0_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	SET_BIT(EXTI -> PR , EXTI_0);
 8000408:	4b0d      	ldr	r3, [pc, #52]	; (8000440 <EXTI0_IRQHandler+0x3c>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <EXTI0_IRQHandler+0x3c>)
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6153      	str	r3, [r2, #20]
	if(EXTI_ApAppFun[EXTI_0]!=NULL)
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <EXTI0_IRQHandler+0x40>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d00e      	beq.n	800043a <EXTI0_IRQHandler+0x36>
	{
		if(EXTI_ApAppFunParameter[EXTI_0]!=NULL)
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <EXTI0_IRQHandler+0x44>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d006      	beq.n	8000432 <EXTI0_IRQHandler+0x2e>
		{
			EXTI_ApAppFun[EXTI_0](EXTI_ApAppFunParameter[EXTI_0]);
 8000424:	4b07      	ldr	r3, [pc, #28]	; (8000444 <EXTI0_IRQHandler+0x40>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a07      	ldr	r2, [pc, #28]	; (8000448 <EXTI0_IRQHandler+0x44>)
 800042a:	6812      	ldr	r2, [r2, #0]
 800042c:	4610      	mov	r0, r2
 800042e:	4798      	blx	r3
	}else
	{
		//error
	}

}
 8000430:	e003      	b.n	800043a <EXTI0_IRQHandler+0x36>
			EXTI_ApAppFun[EXTI_0](NULL);
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <EXTI0_IRQHandler+0x40>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2000      	movs	r0, #0
 8000438:	4798      	blx	r3
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40013c00 	.word	0x40013c00
 8000444:	2000139c 	.word	0x2000139c
 8000448:	200013dc 	.word	0x200013dc

0800044c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	SET_BIT(EXTI -> PR , EXTI_1);
 8000450:	4b0d      	ldr	r3, [pc, #52]	; (8000488 <EXTI1_IRQHandler+0x3c>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <EXTI1_IRQHandler+0x3c>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	6153      	str	r3, [r2, #20]
	if(EXTI_ApAppFun[EXTI_1]!=NULL)
 800045c:	4b0b      	ldr	r3, [pc, #44]	; (800048c <EXTI1_IRQHandler+0x40>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00e      	beq.n	8000482 <EXTI1_IRQHandler+0x36>
	{
		if(EXTI_ApAppFunParameter[EXTI_1]!=NULL)
 8000464:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <EXTI1_IRQHandler+0x44>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d006      	beq.n	800047a <EXTI1_IRQHandler+0x2e>
		{
			EXTI_ApAppFun[EXTI_1](EXTI_ApAppFunParameter[EXTI_1]);
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <EXTI1_IRQHandler+0x40>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4a07      	ldr	r2, [pc, #28]	; (8000490 <EXTI1_IRQHandler+0x44>)
 8000472:	6852      	ldr	r2, [r2, #4]
 8000474:	4610      	mov	r0, r2
 8000476:	4798      	blx	r3
	}else
	{
		//error
	}

}
 8000478:	e003      	b.n	8000482 <EXTI1_IRQHandler+0x36>
			EXTI_ApAppFun[EXTI_1](NULL);
 800047a:	4b04      	ldr	r3, [pc, #16]	; (800048c <EXTI1_IRQHandler+0x40>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	2000      	movs	r0, #0
 8000480:	4798      	blx	r3
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40013c00 	.word	0x40013c00
 800048c:	2000139c 	.word	0x2000139c
 8000490:	200013dc 	.word	0x200013dc

08000494 <GPIO_vSetMode>:


/*====================================================   Start_FUNCTION   ====================================================*/

void GPIO_vSetMode(GPIO_PortNum	Copy_u8GPIOPortNum,GPIO_PinNum Copy_u8Pin,GPIO_Mode	Copy_u8Mode)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
 800049e:	460b      	mov	r3, r1
 80004a0:	71bb      	strb	r3, [r7, #6]
 80004a2:	4613      	mov	r3, r2
 80004a4:	717b      	strb	r3, [r7, #5]
	if((Copy_u8GPIOPortNum<=GPIO_H)&&(Copy_u8Pin<=Pin15)&&(Copy_u8Mode<=GPIO_Analog))
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b05      	cmp	r3, #5
 80004aa:	f200 809f 	bhi.w	80005ec <GPIO_vSetMode+0x158>
 80004ae:	79bb      	ldrb	r3, [r7, #6]
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	f200 809b 	bhi.w	80005ec <GPIO_vSetMode+0x158>
 80004b6:	797b      	ldrb	r3, [r7, #5]
 80004b8:	2b03      	cmp	r3, #3
 80004ba:	f200 8097 	bhi.w	80005ec <GPIO_vSetMode+0x158>
	{
		switch(Copy_u8GPIOPortNum)
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	2b05      	cmp	r3, #5
 80004c2:	f200 8093 	bhi.w	80005ec <GPIO_vSetMode+0x158>
 80004c6:	a201      	add	r2, pc, #4	; (adr r2, 80004cc <GPIO_vSetMode+0x38>)
 80004c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004cc:	080004e5 	.word	0x080004e5
 80004d0:	08000511 	.word	0x08000511
 80004d4:	0800053d 	.word	0x0800053d
 80004d8:	08000569 	.word	0x08000569
 80004dc:	08000595 	.word	0x08000595
 80004e0:	080005c1 	.word	0x080005c1
		{
		case GPIO_A:
			GPIOA->MODER &=~(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));
 80004e4:	4b44      	ldr	r3, [pc, #272]	; (80005f8 <GPIO_vSetMode+0x164>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	7979      	ldrb	r1, [r7, #5]
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	4940      	ldr	r1, [pc, #256]	; (80005f8 <GPIO_vSetMode+0x164>)
 80004f6:	4013      	ands	r3, r2
 80004f8:	600b      	str	r3, [r1, #0]
			GPIOA->MODER |=(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));break;
 80004fa:	4b3f      	ldr	r3, [pc, #252]	; (80005f8 <GPIO_vSetMode+0x164>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	7979      	ldrb	r1, [r7, #5]
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa01 f303 	lsl.w	r3, r1, r3
 8000508:	493b      	ldr	r1, [pc, #236]	; (80005f8 <GPIO_vSetMode+0x164>)
 800050a:	4313      	orrs	r3, r2
 800050c:	600b      	str	r3, [r1, #0]
 800050e:	e06d      	b.n	80005ec <GPIO_vSetMode+0x158>
		case GPIO_B:
			GPIOB->MODER &=~(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));
 8000510:	4b3a      	ldr	r3, [pc, #232]	; (80005fc <GPIO_vSetMode+0x168>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	7979      	ldrb	r1, [r7, #5]
 8000516:	79bb      	ldrb	r3, [r7, #6]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	43db      	mvns	r3, r3
 8000520:	4936      	ldr	r1, [pc, #216]	; (80005fc <GPIO_vSetMode+0x168>)
 8000522:	4013      	ands	r3, r2
 8000524:	600b      	str	r3, [r1, #0]
			GPIOB->MODER |=(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));break;
 8000526:	4b35      	ldr	r3, [pc, #212]	; (80005fc <GPIO_vSetMode+0x168>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	7979      	ldrb	r1, [r7, #5]
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	4931      	ldr	r1, [pc, #196]	; (80005fc <GPIO_vSetMode+0x168>)
 8000536:	4313      	orrs	r3, r2
 8000538:	600b      	str	r3, [r1, #0]
 800053a:	e057      	b.n	80005ec <GPIO_vSetMode+0x158>
		case GPIO_C: GPIOC->MODER &=~(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));
 800053c:	4b30      	ldr	r3, [pc, #192]	; (8000600 <GPIO_vSetMode+0x16c>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	7979      	ldrb	r1, [r7, #5]
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	43db      	mvns	r3, r3
 800054c:	492c      	ldr	r1, [pc, #176]	; (8000600 <GPIO_vSetMode+0x16c>)
 800054e:	4013      	ands	r3, r2
 8000550:	600b      	str	r3, [r1, #0]
			GPIOC->MODER |=(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));break;
 8000552:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <GPIO_vSetMode+0x16c>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	7979      	ldrb	r1, [r7, #5]
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	4927      	ldr	r1, [pc, #156]	; (8000600 <GPIO_vSetMode+0x16c>)
 8000562:	4313      	orrs	r3, r2
 8000564:	600b      	str	r3, [r1, #0]
 8000566:	e041      	b.n	80005ec <GPIO_vSetMode+0x158>
		case GPIO_D: GPIOD->MODER &=~(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <GPIO_vSetMode+0x170>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	7979      	ldrb	r1, [r7, #5]
 800056e:	79bb      	ldrb	r3, [r7, #6]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	4922      	ldr	r1, [pc, #136]	; (8000604 <GPIO_vSetMode+0x170>)
 800057a:	4013      	ands	r3, r2
 800057c:	600b      	str	r3, [r1, #0]
		GPIOD->MODER |=(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));break;
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <GPIO_vSetMode+0x170>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	7979      	ldrb	r1, [r7, #5]
 8000584:	79bb      	ldrb	r3, [r7, #6]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	491d      	ldr	r1, [pc, #116]	; (8000604 <GPIO_vSetMode+0x170>)
 800058e:	4313      	orrs	r3, r2
 8000590:	600b      	str	r3, [r1, #0]
 8000592:	e02b      	b.n	80005ec <GPIO_vSetMode+0x158>
		case GPIO_E: GPIOE->MODER &=~(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <GPIO_vSetMode+0x174>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	7979      	ldrb	r1, [r7, #5]
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	fa01 f303 	lsl.w	r3, r1, r3
 80005a2:	43db      	mvns	r3, r3
 80005a4:	4918      	ldr	r1, [pc, #96]	; (8000608 <GPIO_vSetMode+0x174>)
 80005a6:	4013      	ands	r3, r2
 80005a8:	600b      	str	r3, [r1, #0]
		GPIOE->MODER |=(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));break;
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <GPIO_vSetMode+0x174>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	7979      	ldrb	r1, [r7, #5]
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	fa01 f303 	lsl.w	r3, r1, r3
 80005b8:	4913      	ldr	r1, [pc, #76]	; (8000608 <GPIO_vSetMode+0x174>)
 80005ba:	4313      	orrs	r3, r2
 80005bc:	600b      	str	r3, [r1, #0]
 80005be:	e015      	b.n	80005ec <GPIO_vSetMode+0x158>
		case GPIO_H: GPIOH->MODER &=~(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <GPIO_vSetMode+0x178>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	7979      	ldrb	r1, [r7, #5]
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	fa01 f303 	lsl.w	r3, r1, r3
 80005ce:	43db      	mvns	r3, r3
 80005d0:	490e      	ldr	r1, [pc, #56]	; (800060c <GPIO_vSetMode+0x178>)
 80005d2:	4013      	ands	r3, r2
 80005d4:	600b      	str	r3, [r1, #0]
		 GPIOH->MODER |=(((u32)Copy_u8Mode)<<(2*Copy_u8Pin));break;
 80005d6:	4b0d      	ldr	r3, [pc, #52]	; (800060c <GPIO_vSetMode+0x178>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	7979      	ldrb	r1, [r7, #5]
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	fa01 f303 	lsl.w	r3, r1, r3
 80005e4:	4909      	ldr	r1, [pc, #36]	; (800060c <GPIO_vSetMode+0x178>)
 80005e6:	4313      	orrs	r3, r2
 80005e8:	600b      	str	r3, [r1, #0]
 80005ea:	bf00      	nop
		}
	}else
	{
		/*error*/
	}
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40020000 	.word	0x40020000
 80005fc:	40020400 	.word	0x40020400
 8000600:	40020800 	.word	0x40020800
 8000604:	40020c00 	.word	0x40020c00
 8000608:	40021000 	.word	0x40021000
 800060c:	40021c00 	.word	0x40021c00

08000610 <GPIO_vSetPullUpPullDown>:

/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

void GPIO_vSetPullUpPullDown(GPIO_PortNum	Copy_u8GPIOPortNum,GPIO_PinNum Copy_u8Pin,GPIO_PUPD	Copy_u8PullUpPullDown)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	460b      	mov	r3, r1
 800061c:	71bb      	strb	r3, [r7, #6]
 800061e:	4613      	mov	r3, r2
 8000620:	717b      	strb	r3, [r7, #5]
	if((Copy_u8GPIOPortNum<=GPIO_H)&&(Copy_u8Pin<=Pin15)&&(Copy_u8PullUpPullDown<=Pull_Down))
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b05      	cmp	r3, #5
 8000626:	d859      	bhi.n	80006dc <GPIO_vSetPullUpPullDown+0xcc>
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	2b0f      	cmp	r3, #15
 800062c:	d856      	bhi.n	80006dc <GPIO_vSetPullUpPullDown+0xcc>
 800062e:	797b      	ldrb	r3, [r7, #5]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d853      	bhi.n	80006dc <GPIO_vSetPullUpPullDown+0xcc>
			{
				switch(Copy_u8GPIOPortNum)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	2b05      	cmp	r3, #5
 8000638:	d850      	bhi.n	80006dc <GPIO_vSetPullUpPullDown+0xcc>
 800063a:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <GPIO_vSetPullUpPullDown+0x30>)
 800063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000640:	08000659 	.word	0x08000659
 8000644:	0800066f 	.word	0x0800066f
 8000648:	08000685 	.word	0x08000685
 800064c:	0800069b 	.word	0x0800069b
 8000650:	080006b1 	.word	0x080006b1
 8000654:	080006c7 	.word	0x080006c7
				{
				case GPIO_A: GPIOA->PUPDR |=(((u32)Copy_u8PullUpPullDown)<<(2*Copy_u8Pin));break;
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <GPIO_vSetPullUpPullDown+0xd8>)
 800065a:	68da      	ldr	r2, [r3, #12]
 800065c:	7979      	ldrb	r1, [r7, #5]
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	fa01 f303 	lsl.w	r3, r1, r3
 8000666:	4920      	ldr	r1, [pc, #128]	; (80006e8 <GPIO_vSetPullUpPullDown+0xd8>)
 8000668:	4313      	orrs	r3, r2
 800066a:	60cb      	str	r3, [r1, #12]
 800066c:	e036      	b.n	80006dc <GPIO_vSetPullUpPullDown+0xcc>
				case GPIO_B: GPIOB->PUPDR |=(((u32)Copy_u8PullUpPullDown)<<(2*Copy_u8Pin));break;
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <GPIO_vSetPullUpPullDown+0xdc>)
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	7979      	ldrb	r1, [r7, #5]
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	fa01 f303 	lsl.w	r3, r1, r3
 800067c:	491b      	ldr	r1, [pc, #108]	; (80006ec <GPIO_vSetPullUpPullDown+0xdc>)
 800067e:	4313      	orrs	r3, r2
 8000680:	60cb      	str	r3, [r1, #12]
 8000682:	e02b      	b.n	80006dc <GPIO_vSetPullUpPullDown+0xcc>
				case GPIO_C: GPIOC->PUPDR |=(((u32)Copy_u8PullUpPullDown)<<(2*Copy_u8Pin));break;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <GPIO_vSetPullUpPullDown+0xe0>)
 8000686:	68da      	ldr	r2, [r3, #12]
 8000688:	7979      	ldrb	r1, [r7, #5]
 800068a:	79bb      	ldrb	r3, [r7, #6]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	4917      	ldr	r1, [pc, #92]	; (80006f0 <GPIO_vSetPullUpPullDown+0xe0>)
 8000694:	4313      	orrs	r3, r2
 8000696:	60cb      	str	r3, [r1, #12]
 8000698:	e020      	b.n	80006dc <GPIO_vSetPullUpPullDown+0xcc>
				case GPIO_D: GPIOD->PUPDR |=(((u32)Copy_u8PullUpPullDown)<<(2*Copy_u8Pin));break;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <GPIO_vSetPullUpPullDown+0xe4>)
 800069c:	68da      	ldr	r2, [r3, #12]
 800069e:	7979      	ldrb	r1, [r7, #5]
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	4912      	ldr	r1, [pc, #72]	; (80006f4 <GPIO_vSetPullUpPullDown+0xe4>)
 80006aa:	4313      	orrs	r3, r2
 80006ac:	60cb      	str	r3, [r1, #12]
 80006ae:	e015      	b.n	80006dc <GPIO_vSetPullUpPullDown+0xcc>
				case GPIO_E: GPIOE->PUPDR |=(((u32)Copy_u8PullUpPullDown)<<(2*Copy_u8Pin));break;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <GPIO_vSetPullUpPullDown+0xe8>)
 80006b2:	68da      	ldr	r2, [r3, #12]
 80006b4:	7979      	ldrb	r1, [r7, #5]
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	490e      	ldr	r1, [pc, #56]	; (80006f8 <GPIO_vSetPullUpPullDown+0xe8>)
 80006c0:	4313      	orrs	r3, r2
 80006c2:	60cb      	str	r3, [r1, #12]
 80006c4:	e00a      	b.n	80006dc <GPIO_vSetPullUpPullDown+0xcc>
				case GPIO_H: GPIOH->PUPDR |=(((u32)Copy_u8PullUpPullDown)<<(2*Copy_u8Pin));break;
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <GPIO_vSetPullUpPullDown+0xec>)
 80006c8:	68da      	ldr	r2, [r3, #12]
 80006ca:	7979      	ldrb	r1, [r7, #5]
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	fa01 f303 	lsl.w	r3, r1, r3
 80006d4:	4909      	ldr	r1, [pc, #36]	; (80006fc <GPIO_vSetPullUpPullDown+0xec>)
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60cb      	str	r3, [r1, #12]
 80006da:	bf00      	nop
				}
			}else
			{
				/*error*/
			}
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40021c00 	.word	0x40021c00

08000700 <GPIO_vSetAlternateFunction>:
/*====================================================   END_ FUNCTION   ====================================================*/

/*====================================================   Start_FUNCTION   ====================================================*/
void GPIO_vSetAlternateFunction(GPIO_PortNum	Copy_u8GPIOPortNum,GPIO_PinNum Copy_u8Pin,GPIO_AF	Copy_u8AF)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	460b      	mov	r3, r1
 800070c:	71bb      	strb	r3, [r7, #6]
 800070e:	4613      	mov	r3, r2
 8000710:	717b      	strb	r3, [r7, #5]
	if((Copy_u8GPIOPortNum<=GPIO_H)&&(Copy_u8Pin<=Pin15)&&(Copy_u8AF<=AF15))
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	2b05      	cmp	r3, #5
 8000716:	f200 8123 	bhi.w	8000960 <GPIO_vSetAlternateFunction+0x260>
 800071a:	79bb      	ldrb	r3, [r7, #6]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	f200 811f 	bhi.w	8000960 <GPIO_vSetAlternateFunction+0x260>
 8000722:	797b      	ldrb	r3, [r7, #5]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	f200 811b 	bhi.w	8000960 <GPIO_vSetAlternateFunction+0x260>
	{
		switch(Copy_u8GPIOPortNum)
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b05      	cmp	r3, #5
 800072e:	f200 8117 	bhi.w	8000960 <GPIO_vSetAlternateFunction+0x260>
 8000732:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <GPIO_vSetAlternateFunction+0x38>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	08000751 	.word	0x08000751
 800073c:	080007a9 	.word	0x080007a9
 8000740:	08000801 	.word	0x08000801
 8000744:	08000859 	.word	0x08000859
 8000748:	080008b1 	.word	0x080008b1
 800074c:	08000909 	.word	0x08000909
		{
		case GPIO_A: GPIOA->AFR[(Copy_u8Pin/8U)] &=~(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U))); GPIOA->AFR[(Copy_u8Pin/8U)] |=(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U)));break;
 8000750:	4a86      	ldr	r2, [pc, #536]	; (800096c <GPIO_vSetAlternateFunction+0x26c>)
 8000752:	79bb      	ldrb	r3, [r7, #6]
 8000754:	08db      	lsrs	r3, r3, #3
 8000756:	b2d8      	uxtb	r0, r3
 8000758:	4603      	mov	r3, r0
 800075a:	3308      	adds	r3, #8
 800075c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000760:	7979      	ldrb	r1, [r7, #5]
 8000762:	79bb      	ldrb	r3, [r7, #6]
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	497e      	ldr	r1, [pc, #504]	; (800096c <GPIO_vSetAlternateFunction+0x26c>)
 8000772:	401a      	ands	r2, r3
 8000774:	f100 0308 	add.w	r3, r0, #8
 8000778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800077c:	4a7b      	ldr	r2, [pc, #492]	; (800096c <GPIO_vSetAlternateFunction+0x26c>)
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	08db      	lsrs	r3, r3, #3
 8000782:	b2d8      	uxtb	r0, r3
 8000784:	4603      	mov	r3, r0
 8000786:	3308      	adds	r3, #8
 8000788:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800078c:	7979      	ldrb	r1, [r7, #5]
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	f003 0307 	and.w	r3, r3, #7
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	4974      	ldr	r1, [pc, #464]	; (800096c <GPIO_vSetAlternateFunction+0x26c>)
 800079c:	431a      	orrs	r2, r3
 800079e:	f100 0308 	add.w	r3, r0, #8
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007a6:	e0db      	b.n	8000960 <GPIO_vSetAlternateFunction+0x260>
		case GPIO_B: GPIOB->AFR[(Copy_u8Pin/8U)] &=~(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U))); GPIOB->AFR[(Copy_u8Pin/8U)] |=(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U)));break;
 80007a8:	4a71      	ldr	r2, [pc, #452]	; (8000970 <GPIO_vSetAlternateFunction+0x270>)
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	08db      	lsrs	r3, r3, #3
 80007ae:	b2d8      	uxtb	r0, r3
 80007b0:	4603      	mov	r3, r0
 80007b2:	3308      	adds	r3, #8
 80007b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b8:	7979      	ldrb	r1, [r7, #5]
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	f003 0307 	and.w	r3, r3, #7
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	4969      	ldr	r1, [pc, #420]	; (8000970 <GPIO_vSetAlternateFunction+0x270>)
 80007ca:	401a      	ands	r2, r3
 80007cc:	f100 0308 	add.w	r3, r0, #8
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007d4:	4a66      	ldr	r2, [pc, #408]	; (8000970 <GPIO_vSetAlternateFunction+0x270>)
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b2d8      	uxtb	r0, r3
 80007dc:	4603      	mov	r3, r0
 80007de:	3308      	adds	r3, #8
 80007e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e4:	7979      	ldrb	r1, [r7, #5]
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	f003 0307 	and.w	r3, r3, #7
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	495f      	ldr	r1, [pc, #380]	; (8000970 <GPIO_vSetAlternateFunction+0x270>)
 80007f4:	431a      	orrs	r2, r3
 80007f6:	f100 0308 	add.w	r3, r0, #8
 80007fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007fe:	e0af      	b.n	8000960 <GPIO_vSetAlternateFunction+0x260>
		case GPIO_C: GPIOC->AFR[(Copy_u8Pin/8U)] &=~(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U))); GPIOC->AFR[(Copy_u8Pin/8U)] |=(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U)));break;
 8000800:	4a5c      	ldr	r2, [pc, #368]	; (8000974 <GPIO_vSetAlternateFunction+0x274>)
 8000802:	79bb      	ldrb	r3, [r7, #6]
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	b2d8      	uxtb	r0, r3
 8000808:	4603      	mov	r3, r0
 800080a:	3308      	adds	r3, #8
 800080c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000810:	7979      	ldrb	r1, [r7, #5]
 8000812:	79bb      	ldrb	r3, [r7, #6]
 8000814:	f003 0307 	and.w	r3, r3, #7
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	4954      	ldr	r1, [pc, #336]	; (8000974 <GPIO_vSetAlternateFunction+0x274>)
 8000822:	401a      	ands	r2, r3
 8000824:	f100 0308 	add.w	r3, r0, #8
 8000828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800082c:	4a51      	ldr	r2, [pc, #324]	; (8000974 <GPIO_vSetAlternateFunction+0x274>)
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	b2d8      	uxtb	r0, r3
 8000834:	4603      	mov	r3, r0
 8000836:	3308      	adds	r3, #8
 8000838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083c:	7979      	ldrb	r1, [r7, #5]
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	494a      	ldr	r1, [pc, #296]	; (8000974 <GPIO_vSetAlternateFunction+0x274>)
 800084c:	431a      	orrs	r2, r3
 800084e:	f100 0308 	add.w	r3, r0, #8
 8000852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000856:	e083      	b.n	8000960 <GPIO_vSetAlternateFunction+0x260>
		case GPIO_D: GPIOD->AFR[(Copy_u8Pin/8U)] &=~(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U))); GPIOD->AFR[(Copy_u8Pin/8U)] |=(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U)));break;
 8000858:	4a47      	ldr	r2, [pc, #284]	; (8000978 <GPIO_vSetAlternateFunction+0x278>)
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	08db      	lsrs	r3, r3, #3
 800085e:	b2d8      	uxtb	r0, r3
 8000860:	4603      	mov	r3, r0
 8000862:	3308      	adds	r3, #8
 8000864:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000868:	7979      	ldrb	r1, [r7, #5]
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	f003 0307 	and.w	r3, r3, #7
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	493f      	ldr	r1, [pc, #252]	; (8000978 <GPIO_vSetAlternateFunction+0x278>)
 800087a:	401a      	ands	r2, r3
 800087c:	f100 0308 	add.w	r3, r0, #8
 8000880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000884:	4a3c      	ldr	r2, [pc, #240]	; (8000978 <GPIO_vSetAlternateFunction+0x278>)
 8000886:	79bb      	ldrb	r3, [r7, #6]
 8000888:	08db      	lsrs	r3, r3, #3
 800088a:	b2d8      	uxtb	r0, r3
 800088c:	4603      	mov	r3, r0
 800088e:	3308      	adds	r3, #8
 8000890:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000894:	7979      	ldrb	r1, [r7, #5]
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	4935      	ldr	r1, [pc, #212]	; (8000978 <GPIO_vSetAlternateFunction+0x278>)
 80008a4:	431a      	orrs	r2, r3
 80008a6:	f100 0308 	add.w	r3, r0, #8
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008ae:	e057      	b.n	8000960 <GPIO_vSetAlternateFunction+0x260>
		case GPIO_E: GPIOE->AFR[(Copy_u8Pin/8U)] &=~(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U))); GPIOE->AFR[(Copy_u8Pin/8U)] |=(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U)));break;
 80008b0:	4a32      	ldr	r2, [pc, #200]	; (800097c <GPIO_vSetAlternateFunction+0x27c>)
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	08db      	lsrs	r3, r3, #3
 80008b6:	b2d8      	uxtb	r0, r3
 80008b8:	4603      	mov	r3, r0
 80008ba:	3308      	adds	r3, #8
 80008bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008c0:	7979      	ldrb	r1, [r7, #5]
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	492a      	ldr	r1, [pc, #168]	; (800097c <GPIO_vSetAlternateFunction+0x27c>)
 80008d2:	401a      	ands	r2, r3
 80008d4:	f100 0308 	add.w	r3, r0, #8
 80008d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80008dc:	4a27      	ldr	r2, [pc, #156]	; (800097c <GPIO_vSetAlternateFunction+0x27c>)
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	b2d8      	uxtb	r0, r3
 80008e4:	4603      	mov	r3, r0
 80008e6:	3308      	adds	r3, #8
 80008e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ec:	7979      	ldrb	r1, [r7, #5]
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	f003 0307 	and.w	r3, r3, #7
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	4920      	ldr	r1, [pc, #128]	; (800097c <GPIO_vSetAlternateFunction+0x27c>)
 80008fc:	431a      	orrs	r2, r3
 80008fe:	f100 0308 	add.w	r3, r0, #8
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000906:	e02b      	b.n	8000960 <GPIO_vSetAlternateFunction+0x260>
		case GPIO_H: GPIOH->AFR[(Copy_u8Pin/8U)] &=~(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U))); GPIOH->AFR[(Copy_u8Pin/8U)] |=(((u32)Copy_u8AF)<<(4*(Copy_u8Pin%8U)));break;
 8000908:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <GPIO_vSetAlternateFunction+0x280>)
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	08db      	lsrs	r3, r3, #3
 800090e:	b2d8      	uxtb	r0, r3
 8000910:	4603      	mov	r3, r0
 8000912:	3308      	adds	r3, #8
 8000914:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000918:	7979      	ldrb	r1, [r7, #5]
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	f003 0307 	and.w	r3, r3, #7
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	4915      	ldr	r1, [pc, #84]	; (8000980 <GPIO_vSetAlternateFunction+0x280>)
 800092a:	401a      	ands	r2, r3
 800092c:	f100 0308 	add.w	r3, r0, #8
 8000930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000934:	4a12      	ldr	r2, [pc, #72]	; (8000980 <GPIO_vSetAlternateFunction+0x280>)
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	b2d8      	uxtb	r0, r3
 800093c:	4603      	mov	r3, r0
 800093e:	3308      	adds	r3, #8
 8000940:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000944:	7979      	ldrb	r1, [r7, #5]
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	f003 0307 	and.w	r3, r3, #7
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	490b      	ldr	r1, [pc, #44]	; (8000980 <GPIO_vSetAlternateFunction+0x280>)
 8000954:	431a      	orrs	r2, r3
 8000956:	f100 0308 	add.w	r3, r0, #8
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800095e:	bf00      	nop
		}
	}else
	{
		//error
	}
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	40020000 	.word	0x40020000
 8000970:	40020400 	.word	0x40020400
 8000974:	40020800 	.word	0x40020800
 8000978:	40020c00 	.word	0x40020c00
 800097c:	40021000 	.word	0x40021000
 8000980:	40021c00 	.word	0x40021c00

08000984 <GPIO_vWritePinValue>:
*/

/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void GPIO_vWritePinValue(GPIO_PortNum	Copy_u8GPIOPortNum,GPIO_PinNum Copy_u8Pin,GPIO_State Copy_u8State)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	460b      	mov	r3, r1
 8000990:	71bb      	strb	r3, [r7, #6]
 8000992:	4613      	mov	r3, r2
 8000994:	717b      	strb	r3, [r7, #5]
	if((Copy_u8GPIOPortNum<=GPIO_H)&&(Copy_u8Pin<=Pin15)&&(Copy_u8State<=HighState))
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b05      	cmp	r3, #5
 800099a:	f200 80c1 	bhi.w	8000b20 <GPIO_vWritePinValue+0x19c>
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	f200 80bd 	bhi.w	8000b20 <GPIO_vWritePinValue+0x19c>
 80009a6:	797b      	ldrb	r3, [r7, #5]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	f200 80b9 	bhi.w	8000b20 <GPIO_vWritePinValue+0x19c>
	{
		switch(Copy_u8State)
 80009ae:	797b      	ldrb	r3, [r7, #5]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d002      	beq.n	80009ba <GPIO_vWritePinValue+0x36>
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d05a      	beq.n	8000a6e <GPIO_vWritePinValue+0xea>
		}
	}else
	{
		/*error*/
	}
}
 80009b8:	e0b2      	b.n	8000b20 <GPIO_vWritePinValue+0x19c>
			Copy_u8Pin +=16;
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	3310      	adds	r3, #16
 80009be:	71bb      	strb	r3, [r7, #6]
			switch(Copy_u8GPIOPortNum)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b05      	cmp	r3, #5
 80009c4:	f200 80a9 	bhi.w	8000b1a <GPIO_vWritePinValue+0x196>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <GPIO_vWritePinValue+0x4c>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009e9 	.word	0x080009e9
 80009d4:	080009ff 	.word	0x080009ff
 80009d8:	08000a15 	.word	0x08000a15
 80009dc:	08000a2b 	.word	0x08000a2b
 80009e0:	08000a41 	.word	0x08000a41
 80009e4:	08000a57 	.word	0x08000a57
								case GPIO_A: SET_BIT(GPIOA->BSRR,Copy_u8Pin);break;
 80009e8:	4b50      	ldr	r3, [pc, #320]	; (8000b2c <GPIO_vWritePinValue+0x1a8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	79ba      	ldrb	r2, [r7, #6]
 80009ee:	2101      	movs	r1, #1
 80009f0:	fa01 f202 	lsl.w	r2, r1, r2
 80009f4:	4611      	mov	r1, r2
 80009f6:	4a4d      	ldr	r2, [pc, #308]	; (8000b2c <GPIO_vWritePinValue+0x1a8>)
 80009f8:	430b      	orrs	r3, r1
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	e036      	b.n	8000a6c <GPIO_vWritePinValue+0xe8>
								case GPIO_B: SET_BIT(GPIOB->BSRR,Copy_u8Pin);break;
 80009fe:	4b4c      	ldr	r3, [pc, #304]	; (8000b30 <GPIO_vWritePinValue+0x1ac>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	79ba      	ldrb	r2, [r7, #6]
 8000a04:	2101      	movs	r1, #1
 8000a06:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4a48      	ldr	r2, [pc, #288]	; (8000b30 <GPIO_vWritePinValue+0x1ac>)
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	e02b      	b.n	8000a6c <GPIO_vWritePinValue+0xe8>
								case GPIO_C: SET_BIT(GPIOC->BSRR,Copy_u8Pin);break;
 8000a14:	4b47      	ldr	r3, [pc, #284]	; (8000b34 <GPIO_vWritePinValue+0x1b0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	79ba      	ldrb	r2, [r7, #6]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	4611      	mov	r1, r2
 8000a22:	4a44      	ldr	r2, [pc, #272]	; (8000b34 <GPIO_vWritePinValue+0x1b0>)
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	e020      	b.n	8000a6c <GPIO_vWritePinValue+0xe8>
								case GPIO_D: SET_BIT(GPIOD->BSRR,Copy_u8Pin);break;
 8000a2a:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <GPIO_vWritePinValue+0x1b4>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	79ba      	ldrb	r2, [r7, #6]
 8000a30:	2101      	movs	r1, #1
 8000a32:	fa01 f202 	lsl.w	r2, r1, r2
 8000a36:	4611      	mov	r1, r2
 8000a38:	4a3f      	ldr	r2, [pc, #252]	; (8000b38 <GPIO_vWritePinValue+0x1b4>)
 8000a3a:	430b      	orrs	r3, r1
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	e015      	b.n	8000a6c <GPIO_vWritePinValue+0xe8>
								case GPIO_E: SET_BIT(GPIOE->BSRR,Copy_u8Pin);break;
 8000a40:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <GPIO_vWritePinValue+0x1b8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	79ba      	ldrb	r2, [r7, #6]
 8000a46:	2101      	movs	r1, #1
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4a3b      	ldr	r2, [pc, #236]	; (8000b3c <GPIO_vWritePinValue+0x1b8>)
 8000a50:	430b      	orrs	r3, r1
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	e00a      	b.n	8000a6c <GPIO_vWritePinValue+0xe8>
								case GPIO_H: SET_BIT(GPIOH->BSRR,Copy_u8Pin);break;
 8000a56:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <GPIO_vWritePinValue+0x1bc>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	79ba      	ldrb	r2, [r7, #6]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a62:	4611      	mov	r1, r2
 8000a64:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <GPIO_vWritePinValue+0x1bc>)
 8000a66:	430b      	orrs	r3, r1
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	bf00      	nop
			break;
 8000a6c:	e055      	b.n	8000b1a <GPIO_vWritePinValue+0x196>
				switch(Copy_u8GPIOPortNum)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b05      	cmp	r3, #5
 8000a72:	d854      	bhi.n	8000b1e <GPIO_vWritePinValue+0x19a>
 8000a74:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <GPIO_vWritePinValue+0xf8>)
 8000a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7a:	bf00      	nop
 8000a7c:	08000a95 	.word	0x08000a95
 8000a80:	08000aab 	.word	0x08000aab
 8000a84:	08000ac1 	.word	0x08000ac1
 8000a88:	08000ad7 	.word	0x08000ad7
 8000a8c:	08000aed 	.word	0x08000aed
 8000a90:	08000b03 	.word	0x08000b03
									case GPIO_A: SET_BIT(GPIOA->BSRR,Copy_u8Pin);break;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <GPIO_vWritePinValue+0x1a8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	79ba      	ldrb	r2, [r7, #6]
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <GPIO_vWritePinValue+0x1a8>)
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	e036      	b.n	8000b18 <GPIO_vWritePinValue+0x194>
									case GPIO_B: SET_BIT(GPIOB->BSRR,Copy_u8Pin);break;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <GPIO_vWritePinValue+0x1ac>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <GPIO_vWritePinValue+0x1ac>)
 8000aba:	430b      	orrs	r3, r1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	e02b      	b.n	8000b18 <GPIO_vWritePinValue+0x194>
									case GPIO_C: SET_BIT(GPIOC->BSRR,Copy_u8Pin);break;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <GPIO_vWritePinValue+0x1b0>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	79ba      	ldrb	r2, [r7, #6]
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <GPIO_vWritePinValue+0x1b0>)
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	e020      	b.n	8000b18 <GPIO_vWritePinValue+0x194>
									case GPIO_D: SET_BIT(GPIOD->BSRR,Copy_u8Pin);break;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <GPIO_vWritePinValue+0x1b4>)
 8000ad8:	699b      	ldr	r3, [r3, #24]
 8000ada:	79ba      	ldrb	r2, [r7, #6]
 8000adc:	2101      	movs	r1, #1
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <GPIO_vWritePinValue+0x1b4>)
 8000ae6:	430b      	orrs	r3, r1
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	e015      	b.n	8000b18 <GPIO_vWritePinValue+0x194>
									case GPIO_E: SET_BIT(GPIOE->BSRR,Copy_u8Pin);break;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <GPIO_vWritePinValue+0x1b8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	79ba      	ldrb	r2, [r7, #6]
 8000af2:	2101      	movs	r1, #1
 8000af4:	fa01 f202 	lsl.w	r2, r1, r2
 8000af8:	4611      	mov	r1, r2
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <GPIO_vWritePinValue+0x1b8>)
 8000afc:	430b      	orrs	r3, r1
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	e00a      	b.n	8000b18 <GPIO_vWritePinValue+0x194>
									case GPIO_H: SET_BIT(GPIOH->BSRR,Copy_u8Pin);break;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <GPIO_vWritePinValue+0x1bc>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	79ba      	ldrb	r2, [r7, #6]
 8000b08:	2101      	movs	r1, #1
 8000b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <GPIO_vWritePinValue+0x1bc>)
 8000b12:	430b      	orrs	r3, r1
 8000b14:	6193      	str	r3, [r2, #24]
 8000b16:	bf00      	nop
				break;
 8000b18:	e001      	b.n	8000b1e <GPIO_vWritePinValue+0x19a>
			break;
 8000b1a:	bf00      	nop
 8000b1c:	e000      	b.n	8000b20 <GPIO_vWritePinValue+0x19c>
				break;
 8000b1e:	bf00      	nop
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020c00 	.word	0x40020c00
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40021c00 	.word	0x40021c00

08000b44 <GPIO_vGetPinValue>:

/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

void GPIO_vGetPinValue(GPIO_PortNum	Copy_u8GPIOPortNum,GPIO_PinNum Copy_u8Pin,u8 *Copy_pu8ReadValue)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	603a      	str	r2, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	460b      	mov	r3, r1
 8000b52:	71bb      	strb	r3, [r7, #6]
	if((Copy_u8GPIOPortNum<=GPIO_H)&&(Copy_u8Pin<=Pin15)&&(Copy_pu8ReadValue!=NULL))
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b05      	cmp	r3, #5
 8000b58:	d860      	bhi.n	8000c1c <GPIO_vGetPinValue+0xd8>
 8000b5a:	79bb      	ldrb	r3, [r7, #6]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d85d      	bhi.n	8000c1c <GPIO_vGetPinValue+0xd8>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d05a      	beq.n	8000c1c <GPIO_vGetPinValue+0xd8>
			{
				switch(Copy_u8GPIOPortNum)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	d857      	bhi.n	8000c1c <GPIO_vGetPinValue+0xd8>
 8000b6c:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <GPIO_vGetPinValue+0x30>)
 8000b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000b8d 	.word	0x08000b8d
 8000b78:	08000ba5 	.word	0x08000ba5
 8000b7c:	08000bbd 	.word	0x08000bbd
 8000b80:	08000bd5 	.word	0x08000bd5
 8000b84:	08000bed 	.word	0x08000bed
 8000b88:	08000c05 	.word	0x08000c05
				{
				case GPIO_A: *Copy_pu8ReadValue=GET_BIT(GPIOA->IDR,Copy_u8Pin);break;
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <GPIO_vGetPinValue+0xe4>)
 8000b8e:	691a      	ldr	r2, [r3, #16]
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	fa22 f303 	lsr.w	r3, r2, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	e03b      	b.n	8000c1c <GPIO_vGetPinValue+0xd8>
				case GPIO_B: *Copy_pu8ReadValue=GET_BIT(GPIOB->IDR,Copy_u8Pin);break;
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <GPIO_vGetPinValue+0xe8>)
 8000ba6:	691a      	ldr	r2, [r3, #16]
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	fa22 f303 	lsr.w	r3, r2, r3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	e02f      	b.n	8000c1c <GPIO_vGetPinValue+0xd8>
				case GPIO_C: *Copy_pu8ReadValue=GET_BIT(GPIOC->IDR,Copy_u8Pin);break;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <GPIO_vGetPinValue+0xec>)
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	701a      	strb	r2, [r3, #0]
 8000bd2:	e023      	b.n	8000c1c <GPIO_vGetPinValue+0xd8>
				case GPIO_D: *Copy_pu8ReadValue=GET_BIT(GPIOD->IDR,Copy_u8Pin);break;
 8000bd4:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <GPIO_vGetPinValue+0xf0>)
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	fa22 f303 	lsr.w	r3, r2, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e017      	b.n	8000c1c <GPIO_vGetPinValue+0xd8>
				case GPIO_E: *Copy_pu8ReadValue=GET_BIT(GPIOE->IDR,Copy_u8Pin);break;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <GPIO_vGetPinValue+0xf4>)
 8000bee:	691a      	ldr	r2, [r3, #16]
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	e00b      	b.n	8000c1c <GPIO_vGetPinValue+0xd8>
				case GPIO_H: *Copy_pu8ReadValue=GET_BIT(GPIOH->IDR,Copy_u8Pin);break;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <GPIO_vGetPinValue+0xf8>)
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	bf00      	nop
				}
			}else
			{
				/*error*/
			}
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40021c00 	.word	0x40021c00

08000c40 <GPIO_vTogglePinValue>:
void GPIO_vLockPin(GPIO_PortNum	Copy_u8GPIOPortNum,GPIO_PinNum Copy_u8Pin)
{

}
void GPIO_vTogglePinValue(GPIO_PortNum	Copy_u8GPIOPortNum,GPIO_PinNum Copy_u8Pin)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	460a      	mov	r2, r1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	71bb      	strb	r3, [r7, #6]
	if((Copy_u8GPIOPortNum<=GPIO_H)&&(Copy_u8Pin<=Pin15))
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b05      	cmp	r3, #5
 8000c54:	d856      	bhi.n	8000d04 <GPIO_vTogglePinValue+0xc4>
 8000c56:	79bb      	ldrb	r3, [r7, #6]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d853      	bhi.n	8000d04 <GPIO_vTogglePinValue+0xc4>
		{
			switch(Copy_u8GPIOPortNum)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d850      	bhi.n	8000d04 <GPIO_vTogglePinValue+0xc4>
 8000c62:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <GPIO_vTogglePinValue+0x28>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000c81 	.word	0x08000c81
 8000c6c:	08000c97 	.word	0x08000c97
 8000c70:	08000cad 	.word	0x08000cad
 8000c74:	08000cc3 	.word	0x08000cc3
 8000c78:	08000cd9 	.word	0x08000cd9
 8000c7c:	08000cef 	.word	0x08000cef
			{

							{
							case GPIO_A: TGL_BIT(GPIOA->ODR,Copy_u8Pin);break;
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <GPIO_vTogglePinValue+0xd0>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	79ba      	ldrb	r2, [r7, #6]
 8000c86:	2101      	movs	r1, #1
 8000c88:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <GPIO_vTogglePinValue+0xd0>)
 8000c90:	404b      	eors	r3, r1
 8000c92:	6153      	str	r3, [r2, #20]
 8000c94:	e036      	b.n	8000d04 <GPIO_vTogglePinValue+0xc4>
							case GPIO_B: TGL_BIT(GPIOB->ODR,Copy_u8Pin);break;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <GPIO_vTogglePinValue+0xd4>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	79ba      	ldrb	r2, [r7, #6]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <GPIO_vTogglePinValue+0xd4>)
 8000ca6:	404b      	eors	r3, r1
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	e02b      	b.n	8000d04 <GPIO_vTogglePinValue+0xc4>
							case GPIO_C: TGL_BIT(GPIOC->ODR,Copy_u8Pin);break;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <GPIO_vTogglePinValue+0xd8>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	79ba      	ldrb	r2, [r7, #6]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <GPIO_vTogglePinValue+0xd8>)
 8000cbc:	404b      	eors	r3, r1
 8000cbe:	6153      	str	r3, [r2, #20]
 8000cc0:	e020      	b.n	8000d04 <GPIO_vTogglePinValue+0xc4>
							case GPIO_D: TGL_BIT(GPIOD->ODR,Copy_u8Pin);break;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <GPIO_vTogglePinValue+0xdc>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	79ba      	ldrb	r2, [r7, #6]
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <GPIO_vTogglePinValue+0xdc>)
 8000cd2:	404b      	eors	r3, r1
 8000cd4:	6153      	str	r3, [r2, #20]
 8000cd6:	e015      	b.n	8000d04 <GPIO_vTogglePinValue+0xc4>
							case GPIO_E: TGL_BIT(GPIOE->ODR,Copy_u8Pin);break;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <GPIO_vTogglePinValue+0xe0>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	79ba      	ldrb	r2, [r7, #6]
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <GPIO_vTogglePinValue+0xe0>)
 8000ce8:	404b      	eors	r3, r1
 8000cea:	6153      	str	r3, [r2, #20]
 8000cec:	e00a      	b.n	8000d04 <GPIO_vTogglePinValue+0xc4>
							case GPIO_H: TGL_BIT(GPIOH->ODR,Copy_u8Pin);break;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <GPIO_vTogglePinValue+0xe4>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	79ba      	ldrb	r2, [r7, #6]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <GPIO_vTogglePinValue+0xe4>)
 8000cfe:	404b      	eors	r3, r1
 8000d00:	6153      	str	r3, [r2, #20]
 8000d02:	bf00      	nop
			}
		}else
		{
			/*error*/
		}
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	40020c00 	.word	0x40020c00
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40021c00 	.word	0x40021c00

08000d28 <HC05_Init>:


/*====================================================   Start_FUNCTION   ====================================================*/
volatile u8 * HC05_read=NULL;
void HC05_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	RCC_vEnableClock(APB2_BUS, HC05_CONNCETED_USART_PERIPHERAL);
 8000d2c:	2105      	movs	r1, #5
 8000d2e:	2003      	movs	r0, #3
 8000d30:	f000 fb4e 	bl	80013d0 <RCC_vEnableClock>

	GPIO_vSetMode(HC05_TX_PORT, HC05_TX_PIN, GPIO_ALF);
 8000d34:	2202      	movs	r2, #2
 8000d36:	210b      	movs	r1, #11
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff fbab 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(HC05_RX_PORT, HC05_RX_PIN, GPIO_ALF);
 8000d3e:	2202      	movs	r2, #2
 8000d40:	210c      	movs	r1, #12
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fba6 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetAlternateFunction(HC05_TX_PORT, HC05_TX_PIN, HC05_CONNCETED_USART_TX);
 8000d48:	2208      	movs	r2, #8
 8000d4a:	210b      	movs	r1, #11
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fcd7 	bl	8000700 <GPIO_vSetAlternateFunction>
	GPIO_vSetAlternateFunction(HC05_RX_PORT, HC05_RX_PIN, HC05_CONNCETED_USART_RX);
 8000d52:	2208      	movs	r2, #8
 8000d54:	210c      	movs	r1, #12
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fcd2 	bl	8000700 <GPIO_vSetAlternateFunction>
	UART6_vInit();
 8000d5c:	f001 fbac 	bl	80024b8 <UART6_vInit>
	UART6_Callback(HC05_read);
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HC05_Init+0x4c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fbcd 	bl	8002504 <UART6_Callback>
	NVIC_EnableIRQ(HC05_CONNCETED_IRQn);
 8000d6a:	2047      	movs	r0, #71	; 0x47
 8000d6c:	f000 fae8 	bl	8001340 <NVIC_EnableIRQ>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000141c 	.word	0x2000141c

08000d78 <HC05_SetInputReading>:

void HC05_SetInputReading(u8 *pAppParameter)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	HC05_read = pAppParameter;
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HC05_SetInputReading+0x1c>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000141c 	.word	0x2000141c

08000d98 <KEYPAD_enuInit>:
#include "HAL/Keypad/Keypad_Config.h"
#include "HAL/Keypad/Keypad.h"

/*===========  INCLUDE HAL   ===========*/
void KEYPAD_enuInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	GPIO_vSetMode(KEYPAD_C1_GPIO_PORT, KEYPAD_C1_GPIO_PIN, GPIO_Output);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2104      	movs	r1, #4
 8000da0:	2003      	movs	r0, #3
 8000da2:	f7ff fb77 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(KEYPAD_C2_GPIO_PORT, KEYPAD_C2_GPIO_PIN, GPIO_Output);
 8000da6:	2201      	movs	r2, #1
 8000da8:	2105      	movs	r1, #5
 8000daa:	2003      	movs	r0, #3
 8000dac:	f7ff fb72 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(KEYPAD_C3_GPIO_PORT, KEYPAD_C3_GPIO_PIN, GPIO_Output);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2106      	movs	r1, #6
 8000db4:	2003      	movs	r0, #3
 8000db6:	f7ff fb6d 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(KEYPAD_C4_GPIO_PORT, KEYPAD_C4_GPIO_PIN, GPIO_Output);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2107      	movs	r1, #7
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f7ff fb68 	bl	8000494 <GPIO_vSetMode>
	GPIO_vWritePinValue(KEYPAD_C1_GPIO_PORT, KEYPAD_C1_GPIO_PIN, HighState);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2104      	movs	r1, #4
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f7ff fddb 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(KEYPAD_C2_GPIO_PORT, KEYPAD_C2_GPIO_PIN, HighState);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f7ff fdd6 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(KEYPAD_C3_GPIO_PORT, KEYPAD_C3_GPIO_PIN, HighState);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2106      	movs	r1, #6
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f7ff fdd1 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(KEYPAD_C4_GPIO_PORT, KEYPAD_C4_GPIO_PIN, HighState);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2107      	movs	r1, #7
 8000de6:	2003      	movs	r0, #3
 8000de8:	f7ff fdcc 	bl	8000984 <GPIO_vWritePinValue>


	GPIO_vSetMode(KEYPAD_R1_GPIO_PORT, KEYPAD_R1_GPIO_PIN, GPIO_Input);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2003      	movs	r0, #3
 8000df2:	f7ff fb4f 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(KEYPAD_R2_GPIO_PORT, KEYPAD_R2_GPIO_PIN, GPIO_Input);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f7ff fb4a 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(KEYPAD_R3_GPIO_PORT, KEYPAD_R3_GPIO_PIN, GPIO_Input);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2102      	movs	r1, #2
 8000e04:	2003      	movs	r0, #3
 8000e06:	f7ff fb45 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(KEYPAD_R4_GPIO_PORT, KEYPAD_R4_GPIO_PIN, GPIO_Input);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f7ff fb40 	bl	8000494 <GPIO_vSetMode>
	/*Pull Up*/
	GPIO_vSetPullUpPullDown(KEYPAD_R1_GPIO_PORT, KEYPAD_R1_GPIO_PIN, Pull_Up);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2100      	movs	r1, #0
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f7ff fbf9 	bl	8000610 <GPIO_vSetPullUpPullDown>
	GPIO_vSetPullUpPullDown(KEYPAD_R2_GPIO_PORT, KEYPAD_R2_GPIO_PIN, Pull_Up);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2101      	movs	r1, #1
 8000e22:	2003      	movs	r0, #3
 8000e24:	f7ff fbf4 	bl	8000610 <GPIO_vSetPullUpPullDown>
	GPIO_vSetPullUpPullDown(KEYPAD_R3_GPIO_PORT, KEYPAD_R3_GPIO_PIN, Pull_Up);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f7ff fbef 	bl	8000610 <GPIO_vSetPullUpPullDown>
	GPIO_vSetPullUpPullDown(KEYPAD_R4_GPIO_PORT, KEYPAD_R4_GPIO_PIN, Pull_Up);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2103      	movs	r1, #3
 8000e36:	2003      	movs	r0, #3
 8000e38:	f7ff fbea 	bl	8000610 <GPIO_vSetPullUpPullDown>

}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <Keypad_GetPressedKey>:

void Keypad_GetPressedKey(u8 * Copy_pu8KeyValue)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b08d      	sub	sp, #52	; 0x34
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	u8 Local_u8RowIter = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	u8 Local_u8ColIter = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	u8 Local_Au8R_Port[]={KEYPAD_R1_GPIO_PORT,KEYPAD_R2_GPIO_PORT,KEYPAD_R3_GPIO_PORT,KEYPAD_R4_GPIO_PORT};
 8000e54:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
	u8 Local_Au8R_Pin[]={KEYPAD_R1_GPIO_PIN,KEYPAD_R2_GPIO_PIN,KEYPAD_R3_GPIO_PIN,KEYPAD_R4_GPIO_PIN};
 8000e5a:	4b4f      	ldr	r3, [pc, #316]	; (8000f98 <Keypad_GetPressedKey+0x158>)
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24

	u8 Local_Au8C_Port[]={KEYPAD_C1_GPIO_PORT,KEYPAD_C2_GPIO_PORT,KEYPAD_C3_GPIO_PORT,KEYPAD_C4_GPIO_PORT};
 8000e5e:	f04f 3303 	mov.w	r3, #50529027	; 0x3030303
 8000e62:	623b      	str	r3, [r7, #32]
	u8 Local_Au8C_Pin[]={KEYPAD_C1_GPIO_PIN,KEYPAD_C2_GPIO_PIN,KEYPAD_C3_GPIO_PIN,KEYPAD_C4_GPIO_PIN};
 8000e64:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <Keypad_GetPressedKey+0x15c>)
 8000e66:	61fb      	str	r3, [r7, #28]


	u8 Local_u8RowValue=KEY_NOT_PRESSED , Local_u8Flag=0;
 8000e68:	23c7      	movs	r3, #199	; 0xc7
 8000e6a:	76fb      	strb	r3, [r7, #27]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	for (;Local_u8ColIter < Col ; Local_u8ColIter++ )
 8000e72:	e086      	b.n	8000f82 <Keypad_GetPressedKey+0x142>
	{
		GPIO_vWritePinValue(Local_Au8C_Port[Local_u8ColIter], Local_Au8C_Pin[Local_u8ColIter], LowState);
 8000e74:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e78:	3330      	adds	r3, #48	; 0x30
 8000e7a:	443b      	add	r3, r7
 8000e7c:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8000e80:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e84:	3330      	adds	r3, #48	; 0x30
 8000e86:	443b      	add	r3, r7
 8000e88:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f7ff fd78 	bl	8000984 <GPIO_vWritePinValue>

		for (Local_u8RowIter=0; Local_u8RowIter<Row; Local_u8RowIter++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e9a:	e059      	b.n	8000f50 <Keypad_GetPressedKey+0x110>
		{
			GPIO_vGetPinValue(Local_Au8R_Port[Local_u8RowIter], Local_Au8R_Pin[Local_u8RowIter], &Local_u8RowValue);
 8000e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ea0:	3330      	adds	r3, #48	; 0x30
 8000ea2:	443b      	add	r3, r7
 8000ea4:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8000ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eac:	3330      	adds	r3, #48	; 0x30
 8000eae:	443b      	add	r3, r7
 8000eb0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000eb4:	f107 021b 	add.w	r2, r7, #27
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff fe43 	bl	8000b44 <GPIO_vGetPinValue>
			if (! Local_u8RowValue)
 8000ebe:	7efb      	ldrb	r3, [r7, #27]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d140      	bne.n	8000f46 <Keypad_GetPressedKey+0x106>
			{
				STK_DelayMs(10);
 8000ec4:	200a      	movs	r0, #10
 8000ec6:	f000 fb7d 	bl	80015c4 <STK_DelayMs>
				GPIO_vGetPinValue(Local_Au8R_Port[Local_u8RowIter], Local_Au8R_Pin[Local_u8RowIter], &Local_u8RowValue);
 8000eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ece:	3330      	adds	r3, #48	; 0x30
 8000ed0:	443b      	add	r3, r7
 8000ed2:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8000ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000eda:	3330      	adds	r3, #48	; 0x30
 8000edc:	443b      	add	r3, r7
 8000ede:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000ee2:	f107 021b 	add.w	r2, r7, #27
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fe2c 	bl	8000b44 <GPIO_vGetPinValue>

				if (! Local_u8RowValue)
 8000eec:	7efb      	ldrb	r3, [r7, #27]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d129      	bne.n	8000f46 <Keypad_GetPressedKey+0x106>
				{
					while (! Local_u8RowValue)
 8000ef2:	e010      	b.n	8000f16 <Keypad_GetPressedKey+0xd6>
						GPIO_vGetPinValue(Local_Au8R_Port[Local_u8RowIter], Local_Au8R_Pin[Local_u8RowIter], &Local_u8RowValue);
 8000ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ef8:	3330      	adds	r3, #48	; 0x30
 8000efa:	443b      	add	r3, r7
 8000efc:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8000f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f04:	3330      	adds	r3, #48	; 0x30
 8000f06:	443b      	add	r3, r7
 8000f08:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000f0c:	f107 021b 	add.w	r2, r7, #27
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fe17 	bl	8000b44 <GPIO_vGetPinValue>
					while (! Local_u8RowValue)
 8000f16:	7efb      	ldrb	r3, [r7, #27]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0eb      	beq.n	8000ef4 <Keypad_GetPressedKey+0xb4>

					u8 Local_Au8KeyValues[Row][Col] =KEYS_VALUES;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <Keypad_GetPressedKey+0x160>)
 8000f1e:	f107 0408 	add.w	r4, r7, #8
 8000f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					*Copy_pu8KeyValue = Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
 8000f28:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000f2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	3230      	adds	r2, #48	; 0x30
 8000f34:	443a      	add	r2, r7
 8000f36:	4413      	add	r3, r2
 8000f38:	3b28      	subs	r3, #40	; 0x28
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	701a      	strb	r2, [r3, #0]
					Local_u8Flag =1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		for (Local_u8RowIter=0; Local_u8RowIter<Row; Local_u8RowIter++)
 8000f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d9a1      	bls.n	8000e9c <Keypad_GetPressedKey+0x5c>
				}
			}
		}
		GPIO_vWritePinValue(Local_Au8C_Port[Local_u8ColIter], Local_Au8C_Pin[Local_u8ColIter], HighState);
 8000f58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f5c:	3330      	adds	r3, #48	; 0x30
 8000f5e:	443b      	add	r3, r7
 8000f60:	f813 0c10 	ldrb.w	r0, [r3, #-16]
 8000f64:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f68:	3330      	adds	r3, #48	; 0x30
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fd06 	bl	8000984 <GPIO_vWritePinValue>
	for (;Local_u8ColIter < Col ; Local_u8ColIter++ )
 8000f78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000f82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	f67f af74 	bls.w	8000e74 <Keypad_GetPressedKey+0x34>
	}
	if (! Local_u8Flag)
	{
		//*Copy_pu8KeyValue = KEY_NOT_PRESSED;
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3734      	adds	r7, #52	; 0x34
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	03020100 	.word	0x03020100
 8000f9c:	07060504 	.word	0x07060504
 8000fa0:	08002c08 	.word	0x08002c08

08000fa4 <LCD_enuInit>:
#include "HAL/LCD/LCD.h"

/*===========  INCLUDE HAL   ===========*/

void LCD_enuInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	STK_DelayMs(35);
 8000fa8:	2023      	movs	r0, #35	; 0x23
 8000faa:	f000 fb0b 	bl	80015c4 <STK_DelayMs>
	GPIO_vSetMode(LCD_CTRL_RS_GPIO_PORT, LCD_CTRL_RS_GPIO_PIN_NUM, GPIO_Output);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	210d      	movs	r1, #13
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f7ff fa6e 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(LCD_CTRL_RW_GPIO_PORT, LCD_CTRL_RW_GPIO_PIN_NUM, GPIO_Output);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	210e      	movs	r1, #14
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f7ff fa69 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, GPIO_Output);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	2003      	movs	r0, #3
 8000fc8:	f7ff fa64 	bl	8000494 <GPIO_vSetMode>

	GPIO_vSetMode(LCD_DATA_D4_GPIO_PORT, LCD_DATA_D4_GPIO_PIN_NUM, GPIO_Output);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2109      	movs	r1, #9
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f7ff fa5f 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(LCD_DATA_D5_GPIO_PORT, LCD_DATA_D5_GPIO_PIN_NUM, GPIO_Output);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	210a      	movs	r1, #10
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f7ff fa5a 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(LCD_DATA_D6_GPIO_PORT, LCD_DATA_D6_GPIO_PIN_NUM, GPIO_Output);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	210b      	movs	r1, #11
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f7ff fa55 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(LCD_DATA_D7_GPIO_PORT, LCD_DATA_D7_GPIO_PIN_NUM, GPIO_Output);
 8000fea:	2201      	movs	r2, #1
 8000fec:	210c      	movs	r1, #12
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f7ff fa50 	bl	8000494 <GPIO_vSetMode>
	//LCD_enuLatch((0x30 | (N_DISPLAY_LINES<<3)|(F_DISPLAY_FONT<<2)));
	LCD_enuLatch(0x38);
	STK_DelayMs(1);
	#elif LCD_MODE == FOUR_BIT_MODE

	GPIO_vWritePinValue(LCD_CTRL_RS_GPIO_PORT, LCD_CTRL_RS_GPIO_PIN_NUM, LowState);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	210d      	movs	r1, #13
 8000ff8:	2003      	movs	r0, #3
 8000ffa:	f7ff fcc3 	bl	8000984 <GPIO_vWritePinValue>
	/*Function Set*/
	GPIO_vWritePinValue(LCD_DATA_D4_GPIO_PORT, LCD_DATA_D4_GPIO_PIN_NUM, LowState);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2109      	movs	r1, #9
 8001002:	2003      	movs	r0, #3
 8001004:	f7ff fcbe 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D5_GPIO_PORT, LCD_DATA_D5_GPIO_PIN_NUM, HighState);
 8001008:	2201      	movs	r2, #1
 800100a:	210a      	movs	r1, #10
 800100c:	2003      	movs	r0, #3
 800100e:	f7ff fcb9 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D6_GPIO_PORT, LCD_DATA_D6_GPIO_PIN_NUM, LowState);
 8001012:	2200      	movs	r2, #0
 8001014:	210b      	movs	r1, #11
 8001016:	2003      	movs	r0, #3
 8001018:	f7ff fcb4 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D7_GPIO_PORT, LCD_DATA_D7_GPIO_PIN_NUM, LowState);
 800101c:	2200      	movs	r2, #0
 800101e:	210c      	movs	r1, #12
 8001020:	2003      	movs	r0, #3
 8001022:	f7ff fcaf 	bl	8000984 <GPIO_vWritePinValue>

	GPIO_vWritePinValue(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, HighState);
 8001026:	2201      	movs	r2, #1
 8001028:	210f      	movs	r1, #15
 800102a:	2003      	movs	r0, #3
 800102c:	f7ff fcaa 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayMs(5);
 8001030:	2005      	movs	r0, #5
 8001032:	f000 fac7 	bl	80015c4 <STK_DelayMs>
	GPIO_vWritePinValue(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, LowState);
 8001036:	2200      	movs	r2, #0
 8001038:	210f      	movs	r1, #15
 800103a:	2003      	movs	r0, #3
 800103c:	f7ff fca2 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayMs(5);
 8001040:	2005      	movs	r0, #5
 8001042:	f000 fabf 	bl	80015c4 <STK_DelayMs>

	LCD_enuLatch((0x20 | (N_DISPLAY_LINES<<3)|(F_DISPLAY_FONT<<2)));
 8001046:	2028      	movs	r0, #40	; 0x28
 8001048:	f000 f8f4 	bl	8001234 <LCD_enuLatch>
	STK_DelayMs(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f000 fab9 	bl	80015c4 <STK_DelayMs>
	#else
	#error "Undefined LCD Mode"
	#endif
	/*Display Control*/
	LCD_enuLatch((0x08)|(D_DISPLAY_MODE<<2)|(C_CURSOR_MODE<<1)|(B_BLINK_MODE<<0));
 8001052:	200c      	movs	r0, #12
 8001054:	f000 f8ee 	bl	8001234 <LCD_enuLatch>
	STK_DelayMs(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f000 fab3 	bl	80015c4 <STK_DelayMs>
	/*Display Clear*/
	LCD_enuLatch(LCD_COMMAND_CLEAR_DISPLAY);
 800105e:	2001      	movs	r0, #1
 8001060:	f000 f8e8 	bl	8001234 <LCD_enuLatch>
	STK_DelayMs(2);
 8001064:	2002      	movs	r0, #2
 8001066:	f000 faad 	bl	80015c4 <STK_DelayMs>
	/*Entry Set*/
	LCD_enuLatch((0x04)|(ID_INCREMENT_MODE<<1)|(SH_SHIFT_MODE<<0));
 800106a:	2006      	movs	r0, #6
 800106c:	f000 f8e2 	bl	8001234 <LCD_enuLatch>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <LCD_enuWriteCommand>:
void LCD_enuWriteCommand(u8 Copy_u8Command)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	GPIO_vWritePinValue(LCD_CTRL_RS_GPIO_PORT, LCD_CTRL_RS_GPIO_PIN_NUM, LowState);
 800107e:	2200      	movs	r2, #0
 8001080:	210d      	movs	r1, #13
 8001082:	2003      	movs	r0, #3
 8001084:	f7ff fc7e 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_CTRL_RW_GPIO_PORT, LCD_CTRL_RW_GPIO_PIN_NUM, LowState);
 8001088:	2200      	movs	r2, #0
 800108a:	210e      	movs	r1, #14
 800108c:	2003      	movs	r0, #3
 800108e:	f7ff fc79 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, LowState);
 8001092:	2200      	movs	r2, #0
 8001094:	210f      	movs	r1, #15
 8001096:	2003      	movs	r0, #3
 8001098:	f7ff fc74 	bl	8000984 <GPIO_vWritePinValue>
	LCD_enuLatch(Copy_u8Command);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f8c8 	bl	8001234 <LCD_enuLatch>
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <LCD_enuWriteData>:
void LCD_enuWriteData(u8 Copy_u8Data)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	GPIO_vWritePinValue(LCD_CTRL_RS_GPIO_PORT, LCD_CTRL_RS_GPIO_PIN_NUM, HighState);
 80010b6:	2201      	movs	r2, #1
 80010b8:	210d      	movs	r1, #13
 80010ba:	2003      	movs	r0, #3
 80010bc:	f7ff fc62 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_CTRL_RW_GPIO_PORT, LCD_CTRL_RW_GPIO_PIN_NUM, LowState);
 80010c0:	2200      	movs	r2, #0
 80010c2:	210e      	movs	r1, #14
 80010c4:	2003      	movs	r0, #3
 80010c6:	f7ff fc5d 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, LowState);
 80010ca:	2200      	movs	r2, #0
 80010cc:	210f      	movs	r1, #15
 80010ce:	2003      	movs	r0, #3
 80010d0:	f7ff fc58 	bl	8000984 <GPIO_vWritePinValue>
	LCD_enuLatch(Copy_u8Data);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 f8ac 	bl	8001234 <LCD_enuLatch>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LCD_enuWriteString>:
void LCD_enuWriteString( u8 *Copy_pu8String)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	if(Copy_pu8String != NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d012      	beq.n	8001118 <LCD_enuWriteString+0x34>
	{
		u8 Local_u8iter = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
		while(Copy_pu8String[Local_u8iter] != '\0')
 80010f6:	e009      	b.n	800110c <LCD_enuWriteString+0x28>
		{
			LCD_enuWriteData(Copy_pu8String[Local_u8iter++]);
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	73fa      	strb	r2, [r7, #15]
 80010fe:	461a      	mov	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffd0 	bl	80010ac <LCD_enuWriteData>
		while(Copy_pu8String[Local_u8iter] != '\0')
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1ef      	bne.n	80010f8 <LCD_enuWriteString+0x14>
	}else
	{
		//Local_u8ErrorState = ES_NULL_POINTER;
	}
	//return Local_u8ErrorState;
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <LCD_enuWriteIntegerNum>:
void LCD_enuWriteIntegerNum(s32 Copy_s32IntegerNum)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	//u8 Local_u8ErrorState = ES_NOK;
	if(Copy_s32IntegerNum == 0)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d103      	bne.n	8001136 <LCD_enuWriteIntegerNum+0x16>
	{
		LCD_enuWriteData('0');
 800112e:	2030      	movs	r0, #48	; 0x30
 8001130:	f7ff ffbc 	bl	80010ac <LCD_enuWriteData>
			Local_u8Digits--;
		}
		//Local_u8ErrorState = ES_OK;
	}
	//return Local_u8ErrorState;
}
 8001134:	e04f      	b.n	80011d6 <LCD_enuWriteIntegerNum+0xb6>
		if(Copy_s32IntegerNum<0)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	da05      	bge.n	8001148 <LCD_enuWriteIntegerNum+0x28>
			LCD_enuWriteData('-');
 800113c:	202d      	movs	r0, #45	; 0x2d
 800113e:	f7ff ffb5 	bl	80010ac <LCD_enuWriteData>
			Copy_s32IntegerNum *= (-1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	425b      	negs	r3, r3
 8001146:	607b      	str	r3, [r7, #4]
		u32 Local_u32Num = 0,Local_u32DecimalUnit=10;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	230a      	movs	r3, #10
 800114e:	60fb      	str	r3, [r7, #12]
		u8 Local_u8Digits=0;
 8001150:	2300      	movs	r3, #0
 8001152:	74fb      	strb	r3, [r7, #19]
		while(Copy_s32IntegerNum)
 8001154:	e01f      	b.n	8001196 <LCD_enuWriteIntegerNum+0x76>
			Local_u8Digits++;
 8001156:	7cfb      	ldrb	r3, [r7, #19]
 8001158:	3301      	adds	r3, #1
 800115a:	74fb      	strb	r3, [r7, #19]
			Local_u32Num *= Local_u32DecimalUnit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
			Local_u32Num += (Copy_s32IntegerNum%10) ;
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <LCD_enuWriteIntegerNum+0xc0>)
 800116a:	fb83 1302 	smull	r1, r3, r3, r2
 800116e:	1099      	asrs	r1, r3, #2
 8001170:	17d3      	asrs	r3, r2, #31
 8001172:	1ac9      	subs	r1, r1, r3
 8001174:	460b      	mov	r3, r1
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	1ad1      	subs	r1, r2, r3
 800117e:	460a      	mov	r2, r1
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	4413      	add	r3, r2
 8001184:	617b      	str	r3, [r7, #20]
			Copy_s32IntegerNum /= 10;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <LCD_enuWriteIntegerNum+0xc0>)
 800118a:	fb82 1203 	smull	r1, r2, r2, r3
 800118e:	1092      	asrs	r2, r2, #2
 8001190:	17db      	asrs	r3, r3, #31
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	607b      	str	r3, [r7, #4]
		while(Copy_s32IntegerNum)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1dc      	bne.n	8001156 <LCD_enuWriteIntegerNum+0x36>
		while(Local_u8Digits)
 800119c:	e018      	b.n	80011d0 <LCD_enuWriteIntegerNum+0xb0>
			LCD_enuWriteData((Local_u32Num%10)+'0');
 800119e:	6979      	ldr	r1, [r7, #20]
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <LCD_enuWriteIntegerNum+0xc4>)
 80011a2:	fba3 2301 	umull	r2, r3, r3, r1
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	1aca      	subs	r2, r1, r3
 80011b2:	b2d3      	uxtb	r3, r2
 80011b4:	3330      	adds	r3, #48	; 0x30
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff77 	bl	80010ac <LCD_enuWriteData>
			Local_u32Num /=10;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <LCD_enuWriteIntegerNum+0xc4>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	617b      	str	r3, [r7, #20]
			Local_u8Digits--;
 80011ca:	7cfb      	ldrb	r3, [r7, #19]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	74fb      	strb	r3, [r7, #19]
		while(Local_u8Digits)
 80011d0:	7cfb      	ldrb	r3, [r7, #19]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1e3      	bne.n	800119e <LCD_enuWriteIntegerNum+0x7e>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	66666667 	.word	0x66666667
 80011e4:	cccccccd 	.word	0xcccccccd

080011e8 <LCD_enuGoToPosition>:
		//Local_u8ErrorState = ES_OK;
	}
	//return Local_u8ErrorState;
}
void LCD_enuGoToPosition(u8 Copy_u8Row, u8 Copy_u8Column)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	460a      	mov	r2, r1
 80011f2:	71fb      	strb	r3, [r7, #7]
 80011f4:	4613      	mov	r3, r2
 80011f6:	71bb      	strb	r3, [r7, #6]
	//u8 Local_u8ErrorState = ES_NOK;
	if(Copy_u8Row<=2 && Copy_u8Column<=16)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d816      	bhi.n	800122c <LCD_enuGoToPosition+0x44>
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b10      	cmp	r3, #16
 8001202:	d813      	bhi.n	800122c <LCD_enuGoToPosition+0x44>
	{
		switch(Copy_u8Row)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d002      	beq.n	8001210 <LCD_enuGoToPosition+0x28>
 800120a:	2b02      	cmp	r3, #2
 800120c:	d007      	beq.n	800121e <LCD_enuGoToPosition+0x36>
			break;
			case 2 :
			LCD_enuWriteCommand((0xC0)+Copy_u8Column-1);
			//Local_u8ErrorState = ES_OK;
			break;
			default:break;
 800120e:	e00d      	b.n	800122c <LCD_enuGoToPosition+0x44>
			LCD_enuWriteCommand((0x80)+Copy_u8Column-1);
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	337f      	adds	r3, #127	; 0x7f
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff2c 	bl	8001074 <LCD_enuWriteCommand>
			break;
 800121c:	e006      	b.n	800122c <LCD_enuGoToPosition+0x44>
			LCD_enuWriteCommand((0xC0)+Copy_u8Column-1);
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	3b41      	subs	r3, #65	; 0x41
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff25 	bl	8001074 <LCD_enuWriteCommand>
			break;
 800122a:	bf00      	nop
	else
	{
		//Local_u8ErrorState = ES_OUT_OF_RANGE;
	}
	//return Local_u8ErrorState;
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <LCD_enuLatch>:
	}
	//return Local_u8ErrorState;
}

static void LCD_enuLatch(u8 Copy_u8Latch)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	GPIO_vWritePinValue(LCD_CTRL_RW_GPIO_PORT, LCD_CTRL_RW_GPIO_PIN_NUM, LowState);
 800123e:	2200      	movs	r2, #0
 8001240:	210e      	movs	r1, #14
 8001242:	2003      	movs	r0, #3
 8001244:	f7ff fb9e 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, LowState);
 8001248:	2200      	movs	r2, #0
 800124a:	210f      	movs	r1, #15
 800124c:	2003      	movs	r0, #3
 800124e:	f7ff fb99 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D5_GPIO_PORT, LCD_DATA_D5_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D5)& (1U)));
	GPIO_vWritePinValue(LCD_DATA_D6_GPIO_PORT, LCD_DATA_D6_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D6)& (1U)));
	GPIO_vWritePinValue(LCD_DATA_D7_GPIO_PORT, LCD_DATA_D7_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D7)& (1U)));

	#elif LCD_MODE == FOUR_BIT_MODE
	GPIO_vWritePinValue(LCD_DATA_D4_GPIO_PORT, LCD_DATA_D4_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D4)& (1U)));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	091b      	lsrs	r3, r3, #4
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	2109      	movs	r1, #9
 8001262:	2003      	movs	r0, #3
 8001264:	f7ff fb8e 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D5_GPIO_PORT, LCD_DATA_D5_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D5)& (1U)));
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	210a      	movs	r1, #10
 8001278:	2003      	movs	r0, #3
 800127a:	f7ff fb83 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D6_GPIO_PORT, LCD_DATA_D6_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D6)& (1U)));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	099b      	lsrs	r3, r3, #6
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	461a      	mov	r2, r3
 800128c:	210b      	movs	r1, #11
 800128e:	2003      	movs	r0, #3
 8001290:	f7ff fb78 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D7_GPIO_PORT, LCD_DATA_D7_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D7)& (1U)));
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	09db      	lsrs	r3, r3, #7
 8001298:	b2db      	uxtb	r3, r3
 800129a:	461a      	mov	r2, r3
 800129c:	210c      	movs	r1, #12
 800129e:	2003      	movs	r0, #3
 80012a0:	f7ff fb70 	bl	8000984 <GPIO_vWritePinValue>

	GPIO_vWritePinValue(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, HighState);
 80012a4:	2201      	movs	r2, #1
 80012a6:	210f      	movs	r1, #15
 80012a8:	2003      	movs	r0, #3
 80012aa:	f7ff fb6b 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayMs(5);
 80012ae:	2005      	movs	r0, #5
 80012b0:	f000 f988 	bl	80015c4 <STK_DelayMs>
	GPIO_vWritePinValue(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, LowState);
 80012b4:	2200      	movs	r2, #0
 80012b6:	210f      	movs	r1, #15
 80012b8:	2003      	movs	r0, #3
 80012ba:	f7ff fb63 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayMs(5);
 80012be:	2005      	movs	r0, #5
 80012c0:	f000 f980 	bl	80015c4 <STK_DelayMs>

	GPIO_vWritePinValue(LCD_DATA_D4_GPIO_PORT, LCD_DATA_D4_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D0)& (1U)));
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	2109      	movs	r1, #9
 80012d0:	2003      	movs	r0, #3
 80012d2:	f7ff fb57 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D5_GPIO_PORT, LCD_DATA_D5_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D1)& (1U)));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	085b      	lsrs	r3, r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	210a      	movs	r1, #10
 80012e6:	2003      	movs	r0, #3
 80012e8:	f7ff fb4c 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D6_GPIO_PORT, LCD_DATA_D6_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D2)& (1U)));
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	461a      	mov	r2, r3
 80012fa:	210b      	movs	r1, #11
 80012fc:	2003      	movs	r0, #3
 80012fe:	f7ff fb41 	bl	8000984 <GPIO_vWritePinValue>
	GPIO_vWritePinValue(LCD_DATA_D7_GPIO_PORT, LCD_DATA_D7_GPIO_PIN_NUM, ((Copy_u8Latch>>LCD_D3)& (1U)));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	08db      	lsrs	r3, r3, #3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
 8001310:	210c      	movs	r1, #12
 8001312:	2003      	movs	r0, #3
 8001314:	f7ff fb36 	bl	8000984 <GPIO_vWritePinValue>

	#else
	#error "Undefined LCD Mode"
	#endif
	GPIO_vWritePinValue(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, HighState);
 8001318:	2201      	movs	r2, #1
 800131a:	210f      	movs	r1, #15
 800131c:	2003      	movs	r0, #3
 800131e:	f7ff fb31 	bl	8000984 <GPIO_vWritePinValue>

	STK_DelayMs(5);
 8001322:	2005      	movs	r0, #5
 8001324:	f000 f94e 	bl	80015c4 <STK_DelayMs>
	GPIO_vWritePinValue(LCD_CTRL_EN_GPIO_PORT, LCD_CTRL_EN_GPIO_PIN_NUM, LowState);
 8001328:	2200      	movs	r2, #0
 800132a:	210f      	movs	r1, #15
 800132c:	2003      	movs	r0, #3
 800132e:	f7ff fb29 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayMs(5);
 8001332:	2005      	movs	r0, #5
 8001334:	f000 f946 	bl	80015c4 <STK_DelayMs>

}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <NVIC_EnableIRQ>:

}
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	NVIC ->ISER[IRQn/32U] |= (1U<<(IRQn%32));
 800134a:	490e      	ldr	r1, [pc, #56]	; (8001384 <NVIC_EnableIRQ+0x44>)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	095a      	lsrs	r2, r3, #5
 8001352:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	4258      	negs	r0, r3
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	f000 001f 	and.w	r0, r0, #31
 8001364:	bf58      	it	pl
 8001366:	4243      	negpl	r3, r0
 8001368:	b25b      	sxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	2301      	movs	r3, #1
 800136e:	4083      	lsls	r3, r0
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <NVIC_EnableIRQ+0x44>)
 8001372:	430b      	orrs	r3, r1
 8001374:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000e100 	.word	0xe000e100

08001388 <RCC_vInitSystemCLK>:

/*=====================================*/

/*====================================================   Start_FUNCTION   ====================================================*/
void RCC_vInitSystemCLK(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	#if 	CLKSRC	==	HSI
		SET_BIT(RCC->CR,0);
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <RCC_vInitSystemCLK+0x44>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <RCC_vInitSystemCLK+0x44>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6013      	str	r3, [r2, #0]
		while((GET_BIT(RCC->CR,1))==0);
 8001398:	bf00      	nop
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <RCC_vInitSystemCLK+0x44>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f8      	beq.n	800139a <RCC_vInitSystemCLK+0x12>
		CLR_BIT(RCC->CFGR,0);
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <RCC_vInitSystemCLK+0x44>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <RCC_vInitSystemCLK+0x44>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	6093      	str	r3, [r2, #8]
		CLR_BIT(RCC->CFGR,1);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <RCC_vInitSystemCLK+0x44>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <RCC_vInitSystemCLK+0x44>)
 80013ba:	f023 0302 	bic.w	r3, r3, #2
 80013be:	6093      	str	r3, [r2, #8]
		CLR_BIT(RCC->CFGR,0);
		SET_BIT(RCC->CFGR,1);
	#else
		#error	"Invalid System Clock Source"
	#endif
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <RCC_vEnableClock>:

/*====================================================   END_ FUNCTION   ====================================================*/
void RCC_vEnableClock(BusName_t BusName , u8 Copy_u8PerNum )
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	460a      	mov	r2, r1
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	4613      	mov	r3, r2
 80013de:	71bb      	strb	r3, [r7, #6]
	if((BusName <=3)&&(Copy_u8PerNum <=31))
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d83c      	bhi.n	8001460 <RCC_vEnableClock+0x90>
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	2b1f      	cmp	r3, #31
 80013ea:	d839      	bhi.n	8001460 <RCC_vEnableClock+0x90>
	{
		switch(BusName)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d838      	bhi.n	8001464 <RCC_vEnableClock+0x94>
 80013f2:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <RCC_vEnableClock+0x28>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	08001409 	.word	0x08001409
 80013fc:	0800141f 	.word	0x0800141f
 8001400:	08001435 	.word	0x08001435
 8001404:	0800144b 	.word	0x0800144b
		{
			case AHB1_BUS:  SET_BIT(RCC->AHB1ENR,Copy_u8PerNum );         break ;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <RCC_vEnableClock+0xa4>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	79ba      	ldrb	r2, [r7, #6]
 800140e:	2101      	movs	r1, #1
 8001410:	fa01 f202 	lsl.w	r2, r1, r2
 8001414:	4611      	mov	r1, r2
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <RCC_vEnableClock+0xa4>)
 8001418:	430b      	orrs	r3, r1
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
 800141c:	e023      	b.n	8001466 <RCC_vEnableClock+0x96>
			case AHB2_BUS:  SET_BIT(RCC->AHB2ENR,Copy_u8PerNum );         break ;
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <RCC_vEnableClock+0xa4>)
 8001420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001422:	79ba      	ldrb	r2, [r7, #6]
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f202 	lsl.w	r2, r1, r2
 800142a:	4611      	mov	r1, r2
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <RCC_vEnableClock+0xa4>)
 800142e:	430b      	orrs	r3, r1
 8001430:	6353      	str	r3, [r2, #52]	; 0x34
 8001432:	e018      	b.n	8001466 <RCC_vEnableClock+0x96>
			case APB1_BUS:  SET_BIT(RCC->APB1ENR,Copy_u8PerNum );         break ;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <RCC_vEnableClock+0xa4>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	79ba      	ldrb	r2, [r7, #6]
 800143a:	2101      	movs	r1, #1
 800143c:	fa01 f202 	lsl.w	r2, r1, r2
 8001440:	4611      	mov	r1, r2
 8001442:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <RCC_vEnableClock+0xa4>)
 8001444:	430b      	orrs	r3, r1
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	e00d      	b.n	8001466 <RCC_vEnableClock+0x96>
			case APB2_BUS:  SET_BIT(RCC->APB2ENR,Copy_u8PerNum );         break ;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <RCC_vEnableClock+0xa4>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	79ba      	ldrb	r2, [r7, #6]
 8001450:	2101      	movs	r1, #1
 8001452:	fa01 f202 	lsl.w	r2, r1, r2
 8001456:	4611      	mov	r1, r2
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <RCC_vEnableClock+0xa4>)
 800145a:	430b      	orrs	r3, r1
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	e002      	b.n	8001466 <RCC_vEnableClock+0x96>
			default :     /*   ERROR   */          break ;

		}
	}
 8001460:	bf00      	nop
 8001462:	e000      	b.n	8001466 <RCC_vEnableClock+0x96>
			default :     /*   ERROR   */          break ;
 8001464:	bf00      	nop
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <MSPI_VidInit>:
#include "MCAL/SPI/SPI_interface.h"
#include "MCAL/SPI/SPI_config.h"
/*****************************************/
 
 
 void MSPI_VidInit ( void ){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

	 #if   MSP1_STATUS == MSPI_ENABLE

	 #if		MSPI1_CLOCK_MODE == MSPI_MODE0

	 CLR_BIT( MSPI1 -> CR1 , 0 ); CLR_BIT( MSPI1 -> CR1 , 1 );
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MSPI_VidInit+0x78>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <MSPI_VidInit+0x78>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MSPI_VidInit+0x78>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <MSPI_VidInit+0x78>)
 800148e:	f023 0302 	bic.w	r3, r3, #2
 8001492:	6013      	str	r3, [r2, #0]

	 #endif

	 #if    MSPI1_MASTER_SLAVE == MSPI_MASTER

	 SET_BIT( MSPI1 -> CR1 , 2 );
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <MSPI_VidInit+0x78>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <MSPI_VidInit+0x78>)
 800149a:	f043 0304 	orr.w	r3, r3, #4
 800149e:	6013      	str	r3, [r2, #0]

	 #endif

	 #if   MSPI1_DATA_ORDER == MSPI_MSB_FIRST

	 CLR_BIT( MSPI1 -> CR1 , 7 );
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <MSPI_VidInit+0x78>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <MSPI_VidInit+0x78>)
 80014a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014aa:	6013      	str	r3, [r2, #0]

	 #endif

	 #if   MSPI1_SS_MANAGE  == HW_SLAVE_MANAGEMENT

	 CLR_BIT( MSPI1 -> CR1 , 9 );
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <MSPI_VidInit+0x78>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <MSPI_VidInit+0x78>)
 80014b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014b6:	6013      	str	r3, [r2, #0]

	 #endif

	 #if   MSPI1_DATA_SIZE == MSPI_8BIT_DATA

	 CLR_BIT( MSPI1 -> CR1 , 11 );
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <MSPI_VidInit+0x78>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <MSPI_VidInit+0x78>)
 80014be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014c2:	6013      	str	r3, [r2, #0]

	 #endif

	 #if   MSPI1_INT_STATUS == MSPI_INT_DISABLE

	 MSPI1 -> CR2 = 0 ;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <MSPI_VidInit+0x78>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]

	 SET_BIT( MSPI1 -> CR2 , 6 );

	 #endif

	 MSPI1 -> CR1 &= 0xFFC7 ;
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <MSPI_VidInit+0x78>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <MSPI_VidInit+0x78>)
 80014d0:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 80014d4:	4013      	ands	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]


	 SET_BIT( MSPI1 -> CR1 , 6 );
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <MSPI_VidInit+0x78>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <MSPI_VidInit+0x78>)
 80014de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e2:	6013      	str	r3, [r2, #0]

	 #elif MSP1_STATUS == MSPI_DISABLE
	 CLR_BIT( MSPI1 -> CR1 , 6 );
	 #endif

 }
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40003800 	.word	0x40003800

080014f4 <MSPI1_voidSendReceiveSynch>:
	 
 }
 
		//	Only One Slave
 void MSPI1_voidSendReceiveSynch(u8 Copt_u8DataToTransmit  , u8 *Copy_DataToReceive)
 {
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]

			/* Send Data */
	 MSPI1 -> DR =Copt_u8DataToTransmit ;
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <MSPI1_voidSendReceiveSynch+0x38>)
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	60d3      	str	r3, [r2, #12]
			/* Wait Busy Flag */
		while(GET_BIT(MSPI1 ->SR , BUSY_FLAG) ==1) ;
 8001506:	bf00      	nop
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <MSPI1_voidSendReceiveSynch+0x38>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	09db      	lsrs	r3, r3, #7
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b01      	cmp	r3, #1
 8001514:	d0f8      	beq.n	8001508 <MSPI1_voidSendReceiveSynch+0x14>
			/* Return Recive Data */
		*Copy_DataToReceive = MSPI1 ->DR ;
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <MSPI1_voidSendReceiveSynch+0x38>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	701a      	strb	r2, [r3, #0]

 }
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40003800 	.word	0x40003800

08001530 <STK_Init>:
static volatile u8 STK_CallBackMode;
static volatile u8 L_u8ReadFlag;
static u32 counter;
/*====================================================   Start_FUNCTION   ====================================================*/
void STK_Init(STK_CLK_SRC_t STK_CLK_SRC)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	/*Clear Val & Count flag*/
	STK->VAL =0;
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <STK_Init+0x54>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
	/*Clk Source*/
	switch(STK_CLK_SRC)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d002      	beq.n	800154c <STK_Init+0x1c>
 8001546:	2b01      	cmp	r3, #1
 8001548:	d00b      	beq.n	8001562 <STK_Init+0x32>
	{
	case STK_CLK_SRC_HCLK:		STK->CTRL |=STK_CTRL_CLKSOURCE;STK_CLK_Ms_Ticks=16000U;break;
	case STK_CLK_SRC_HCLK_Div8:	STK->CTRL &=~STK_CTRL_CLKSOURCE;STK_CLK_Ms_Ticks=2000U;break;
	default ://error
		break;
 800154a:	e015      	b.n	8001578 <STK_Init+0x48>
	case STK_CLK_SRC_HCLK:		STK->CTRL |=STK_CTRL_CLKSOURCE;STK_CLK_Ms_Ticks=16000U;break;
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <STK_Init+0x54>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <STK_Init+0x54>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <STK_Init+0x58>)
 800155a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e00a      	b.n	8001578 <STK_Init+0x48>
	case STK_CLK_SRC_HCLK_Div8:	STK->CTRL &=~STK_CTRL_CLKSOURCE;STK_CLK_Ms_Ticks=2000U;break;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <STK_Init+0x54>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a07      	ldr	r2, [pc, #28]	; (8001584 <STK_Init+0x54>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <STK_Init+0x58>)
 8001570:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	bf00      	nop
	}
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e010 	.word	0xe000e010
 8001588:	20001420 	.word	0x20001420

0800158c <STK_Stop>:
/*====================================================   END_ FUNCTION   ====================================================*/

/*====================================================   Start_FUNCTION   ====================================================*/
void STK_Stop(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
	STK->CTRL &=~ STK_CTRL_ENABLE;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <STK_Stop+0x34>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <STK_Stop+0x34>)
 8001596:	f023 0301 	bic.w	r3, r3, #1
 800159a:	6013      	str	r3, [r2, #0]
	STK->LOAD=0;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <STK_Stop+0x34>)
 800159e:	2200      	movs	r2, #0
 80015a0:	605a      	str	r2, [r3, #4]
	STK->VAL=0;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <STK_Stop+0x34>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
	STK->CTRL &=~ STK_CTRL_TICKINT;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <STK_Stop+0x34>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <STK_Stop+0x34>)
 80015ae:	f023 0302 	bic.w	r3, r3, #2
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <STK_DelayMs>:
/*====================================================   END_ FUNCTION   ====================================================*/

/*====================================================   Start_FUNCTION   ====================================================*/
void STK_DelayMs(u32 Copy_u32RequiredMs)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	STK->LOAD = (STK_CLK_Ms_Ticks*Copy_u32RequiredMs)-1;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <STK_DelayMs+0x50>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <STK_DelayMs+0x54>)
 80015d8:	3b01      	subs	r3, #1
 80015da:	6053      	str	r3, [r2, #4]
	STK->VAL=0;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <STK_DelayMs+0x54>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
	STK->CTRL |= STK_CTRL_ENABLE;
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <STK_DelayMs+0x54>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <STK_DelayMs+0x54>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6013      	str	r3, [r2, #0]
	while((STK->CTRL & STK_CTRL_COUNTFLAG) == 0);
 80015ee:	bf00      	nop
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <STK_DelayMs+0x54>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f9      	beq.n	80015f0 <STK_DelayMs+0x2c>
	STK->CTRL &=~ STK_CTRL_ENABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <STK_DelayMs+0x54>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a05      	ldr	r2, [pc, #20]	; (8001618 <STK_DelayMs+0x54>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6013      	str	r3, [r2, #0]

}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20001420 	.word	0x20001420
 8001618:	e000e010 	.word	0xe000e010

0800161c <STK_DelayUs>:
/*====================================================   END_ FUNCTION   ====================================================*/
void STK_DelayUs(u32 Copy_u32RequiredUs)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	STK->LOAD = ((STK_CLK_Ms_Ticks/1000U)*Copy_u32RequiredUs)-1;
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <STK_DelayUs+0x58>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a13      	ldr	r2, [pc, #76]	; (8001678 <STK_DelayUs+0x5c>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	099b      	lsrs	r3, r3, #6
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	fb02 f303 	mul.w	r3, r2, r3
 8001636:	4a11      	ldr	r2, [pc, #68]	; (800167c <STK_DelayUs+0x60>)
 8001638:	3b01      	subs	r3, #1
 800163a:	6053      	str	r3, [r2, #4]
	STK->VAL=0;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <STK_DelayUs+0x60>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
	STK->CTRL |= STK_CTRL_ENABLE;
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <STK_DelayUs+0x60>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <STK_DelayUs+0x60>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6013      	str	r3, [r2, #0]
	while((STK->CTRL & STK_CTRL_COUNTFLAG) == 0);
 800164e:	bf00      	nop
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <STK_DelayUs+0x60>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f9      	beq.n	8001650 <STK_DelayUs+0x34>
	STK->CTRL &=~ STK_CTRL_ENABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <STK_DelayUs+0x60>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a06      	ldr	r2, [pc, #24]	; (800167c <STK_DelayUs+0x60>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6013      	str	r3, [r2, #0]

}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	20001420 	.word	0x20001420
 8001678:	10624dd3 	.word	0x10624dd3
 800167c:	e000e010 	.word	0xe000e010

08001680 <STK_PWM>:



}*/
void STK_PWM(u8 Freq,u16 Duty,void(*pAppFun)(void))
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	603a      	str	r2, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
 800168c:	460b      	mov	r3, r1
 800168e:	80bb      	strh	r3, [r7, #4]
	u32 L_RequiredTime = ((1000U/Freq)*2U);//how 0.5ms in this freq
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
	STK_RequiredOnTime = (Duty*L_RequiredTime/1000);
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	4a16      	ldr	r2, [pc, #88]	; (8001700 <STK_PWM+0x80>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <STK_PWM+0x84>)
 80016b0:	6013      	str	r3, [r2, #0]
	STK_RequiredOffTime = ((1000-Duty)*L_RequiredTime/1000);
 80016b2:	88bb      	ldrh	r3, [r7, #4]
 80016b4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80016b8:	461a      	mov	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <STK_PWM+0x80>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <STK_PWM+0x88>)
 80016ca:	6013      	str	r3, [r2, #0]
	STK_pAppFun = pAppFun;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	; (800170c <STK_PWM+0x8c>)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	6013      	str	r3, [r2, #0]
	STK->LOAD = (8000U-1);		//.5ms
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <STK_PWM+0x90>)
 80016d4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016d8:	605a      	str	r2, [r3, #4]
	STK->VAL=0;
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <STK_PWM+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
	STK_CallBackMode = PWM;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <STK_PWM+0x94>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
	STK_pAppFun();
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <STK_PWM+0x8c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4798      	blx	r3
	STK->CTRL |= 3U;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <STK_PWM+0x90>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <STK_PWM+0x90>)
 80016f2:	f043 0303 	orr.w	r3, r3, #3
 80016f6:	6013      	str	r3, [r2, #0]

}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	10624dd3 	.word	0x10624dd3
 8001704:	20001424 	.word	0x20001424
 8001708:	20001428 	.word	0x20001428
 800170c:	2000142c 	.word	0x2000142c
 8001710:	e000e010 	.word	0xe000e010
 8001714:	20001430 	.word	0x20001430

08001718 <SysTick_Handler>:
/*====================================================   Start_FUNCTION   ====================================================*/

void SysTick_Handler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	if(STK_CallBackMode != PWM)
 800171c:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <SysTick_Handler+0x98>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d01a      	beq.n	800175c <SysTick_Handler+0x44>
	{
		if(STK_CallBackMode == ONE_TIME)
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <SysTick_Handler+0x98>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d111      	bne.n	8001754 <SysTick_Handler+0x3c>
		{
			STK->CTRL &=~ STK_CTRL_ENABLE;
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <SysTick_Handler+0x9c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1f      	ldr	r2, [pc, #124]	; (80017b4 <SysTick_Handler+0x9c>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]
			STK->LOAD=0;
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <SysTick_Handler+0x9c>)
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
			STK->VAL=0;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <SysTick_Handler+0x9c>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
			STK->CTRL &=~ STK_CTRL_TICKINT;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <SysTick_Handler+0x9c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a19      	ldr	r2, [pc, #100]	; (80017b4 <SysTick_Handler+0x9c>)
 800174e:	f023 0302 	bic.w	r3, r3, #2
 8001752:	6013      	str	r3, [r2, #0]
		}
		STK_pAppFun();
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <SysTick_Handler+0xa0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4798      	blx	r3
 800175a:	e01d      	b.n	8001798 <SysTick_Handler+0x80>
	}else
	{
		counter++;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <SysTick_Handler+0xa4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <SysTick_Handler+0xa4>)
 8001764:	6013      	str	r3, [r2, #0]
		if(counter == (STK_RequiredOnTime))
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <SysTick_Handler+0xa4>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <SysTick_Handler+0xa8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d103      	bne.n	800177a <SysTick_Handler+0x62>
		{
			STK_pAppFun();
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <SysTick_Handler+0xa0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4798      	blx	r3
 8001778:	e00e      	b.n	8001798 <SysTick_Handler+0x80>
		}else if(counter == (STK_RequiredOnTime+STK_RequiredOffTime))
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <SysTick_Handler+0xa8>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <SysTick_Handler+0xac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	441a      	add	r2, r3
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <SysTick_Handler+0xa4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d105      	bne.n	8001798 <SysTick_Handler+0x80>
		{
			STK_pAppFun();
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <SysTick_Handler+0xa0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4798      	blx	r3
			counter=0;
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <SysTick_Handler+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
		}
	}

	L_u8ReadFlag = GET_BIT(STK->CTRL,16U);
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <SysTick_Handler+0x9c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0c1b      	lsrs	r3, r3, #16
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <SysTick_Handler+0xb0>)
 80017a8:	701a      	strb	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20001430 	.word	0x20001430
 80017b4:	e000e010 	.word	0xe000e010
 80017b8:	2000142c 	.word	0x2000142c
 80017bc:	20001434 	.word	0x20001434
 80017c0:	20001424 	.word	0x20001424
 80017c4:	20001428 	.word	0x20001428
 80017c8:	20001431 	.word	0x20001431

080017cc <TFT_voidInit>:
			-	Wait 150 Ms
			-	Color mode And Select The Option(Parameter)From ( 444 (0x03), 365(0x05) , 666(0x06) )  Send Option as Data Not Command
			-	Display command   0X29
 */
void TFT_voidInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
	/*set Pin configuration for spi and tft */

	GPIO_vSetMode(TFT_SPI_CLK_PIN  ,GPIO_ALF);        //SPI CLK
 80017d0:	2202      	movs	r2, #2
 80017d2:	210a      	movs	r1, #10
 80017d4:	2001      	movs	r0, #1
 80017d6:	f7fe fe5d 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(TFT_SPI_MOSI_PIN ,GPIO_ALF);        //SPI MOSI
 80017da:	2202      	movs	r2, #2
 80017dc:	210f      	movs	r1, #15
 80017de:	2001      	movs	r0, #1
 80017e0:	f7fe fe58 	bl	8000494 <GPIO_vSetMode>

	GPIO_vSetMode(TFT_RESET_PIN ,GPIO_Output);        //Reset for TFT
 80017e4:	2201      	movs	r2, #1
 80017e6:	2101      	movs	r1, #1
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7fe fe53 	bl	8000494 <GPIO_vSetMode>
	GPIO_vSetMode(TFT_DC_PIN	,GPIO_Output);        //Data/Command select for tft
 80017ee:	2201      	movs	r2, #1
 80017f0:	2109      	movs	r1, #9
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7fe fe4e 	bl	8000494 <GPIO_vSetMode>

	GPIO_vSetAlternateFunction(TFT_SPI_CLK_PIN  ,AF5);      //Setting Alternate func SPI CLK
 80017f8:	2205      	movs	r2, #5
 80017fa:	210a      	movs	r1, #10
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7fe ff7f 	bl	8000700 <GPIO_vSetAlternateFunction>
	GPIO_vSetAlternateFunction(TFT_SPI_MOSI_PIN ,AF5);      //Setting Alternate func SPI MOSI
 8001802:	2205      	movs	r2, #5
 8001804:	210f      	movs	r1, #15
 8001806:	2001      	movs	r0, #1
 8001808:	f7fe ff7a 	bl	8000700 <GPIO_vSetAlternateFunction>
	/*init Systic for delay*/
	STK_Init(STK_CLK_SRC_HCLK);
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff fe8f 	bl	8001530 <STK_Init>
	/***************************************/

	/*	reset Pulse  */
	GPIO_vWritePinValue(TFT_RESET_PIN, HighState) ;
 8001812:	2201      	movs	r2, #1
 8001814:	2101      	movs	r1, #1
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff f8b4 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayUs(100);
 800181c:	2064      	movs	r0, #100	; 0x64
 800181e:	f7ff fefd 	bl	800161c <STK_DelayUs>
	GPIO_vWritePinValue(TFT_RESET_PIN, LowState)  ;
 8001822:	2200      	movs	r2, #0
 8001824:	2101      	movs	r1, #1
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff f8ac 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayUs(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff fef5 	bl	800161c <STK_DelayUs>
	GPIO_vWritePinValue(TFT_RESET_PIN, HighState) ;
 8001832:	2201      	movs	r2, #1
 8001834:	2101      	movs	r1, #1
 8001836:	2001      	movs	r0, #1
 8001838:	f7ff f8a4 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayUs(100);
 800183c:	2064      	movs	r0, #100	; 0x64
 800183e:	f7ff feed 	bl	800161c <STK_DelayUs>
	GPIO_vWritePinValue(TFT_RESET_PIN, LowState)  ;
 8001842:	2200      	movs	r2, #0
 8001844:	2101      	movs	r1, #1
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff f89c 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayUs(100);
 800184c:	2064      	movs	r0, #100	; 0x64
 800184e:	f7ff fee5 	bl	800161c <STK_DelayUs>
	GPIO_vWritePinValue(TFT_RESET_PIN, HighState) ;
 8001852:	2201      	movs	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff f894 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayUs(120000);
 800185c:	4806      	ldr	r0, [pc, #24]	; (8001878 <TFT_voidInit+0xac>)
 800185e:	f7ff fedd 	bl	800161c <STK_DelayUs>


	voidWriteCommand(0x3A)				   ;
 8001862:	203a      	movs	r0, #58	; 0x3a
 8001864:	f000 f80a 	bl	800187c <voidWriteCommand>
	voidWriteData(0x05)					   ;
 8001868:	2005      	movs	r0, #5
 800186a:	f000 f81c 	bl	80018a6 <voidWriteData>
	/*		Display On Command		*/
	voidWriteCommand(0x29)				   ;
 800186e:	2029      	movs	r0, #41	; 0x29
 8001870:	f000 f804 	bl	800187c <voidWriteCommand>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	0001d4c0 	.word	0x0001d4c0

0800187c <voidWriteCommand>:


void voidWriteCommand(u8 Copy_u8Command)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Temp ;			// SPI Send Data here it donsen't receive So it affects nothing
	/* Set A0	Pin to Low to send a command 	*/
	GPIO_vWritePinValue(TFT_DC_PIN , LowState) ;
 8001886:	2200      	movs	r2, #0
 8001888:	2109      	movs	r1, #9
 800188a:	2001      	movs	r0, #1
 800188c:	f7ff f87a 	bl	8000984 <GPIO_vWritePinValue>
	/* Send Command Over SPI */
	MSPI1_voidSendReceiveSynch(Copy_u8Command ,  &Local_u8Temp );
 8001890:	f107 020f 	add.w	r2, r7, #15
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fe2b 	bl	80014f4 <MSPI1_voidSendReceiveSynch>
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <voidWriteData>:

void voidWriteData(u8 Copy_u8Data)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Temp ;			// SPI Send Data here it donsen't receive So it affects nothing
	/* Set A0	Pin to High to send data 	*/
	GPIO_vWritePinValue(TFT_DC_PIN , HighState) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	2109      	movs	r1, #9
 80018b4:	2001      	movs	r0, #1
 80018b6:	f7ff f865 	bl	8000984 <GPIO_vWritePinValue>
	/* Send DATA Over SPI */
	MSPI1_voidSendReceiveSynch(Copy_u8Data , &Local_u8Temp );
 80018ba:	f107 020f 	add.w	r2, r7, #15
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fe16 	bl	80014f4 <MSPI1_voidSendReceiveSynch>
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <TFT_vSetCursorPosition>:

void TFT_vSetCursorPosition(u8 x1, u16 y1, u8 x2, u16 y2){
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	4611      	mov	r1, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	4623      	mov	r3, r4
 80018e0:	71fb      	strb	r3, [r7, #7]
 80018e2:	4603      	mov	r3, r0
 80018e4:	80bb      	strh	r3, [r7, #4]
 80018e6:	460b      	mov	r3, r1
 80018e8:	71bb      	strb	r3, [r7, #6]
 80018ea:	4613      	mov	r3, r2
 80018ec:	807b      	strh	r3, [r7, #2]
	/*	Set X_ADRESS */
	voidWriteCommand(0x2A);
 80018ee:	202a      	movs	r0, #42	; 0x2a
 80018f0:	f7ff ffc4 	bl	800187c <voidWriteCommand>
	/* Start Position*/
	voidWriteData(0);							/*send higher byte always be 0 as x limit is 240*/
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff ffd6 	bl	80018a6 <voidWriteData>
	voidWriteData(x1); 							/*send lower Byte*/
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ffd2 	bl	80018a6 <voidWriteData>
	/* End position */
	voidWriteData(0);
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff ffcf 	bl	80018a6 <voidWriteData>
	voidWriteData(x2);
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ffcb 	bl	80018a6 <voidWriteData>

	/*	Set Y_ADRESS */
	voidWriteCommand(0x2B);
 8001910:	202b      	movs	r0, #43	; 0x2b
 8001912:	f7ff ffb3 	bl	800187c <voidWriteCommand>
	/* Start Position*/
	voidWriteData(y1>>8);      					/*send higher byte*/
 8001916:	88bb      	ldrh	r3, [r7, #4]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	b29b      	uxth	r3, r3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ffc1 	bl	80018a6 <voidWriteData>
	voidWriteData(y1 & 0x00ff);					/*send lower Byte */
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ffbc 	bl	80018a6 <voidWriteData>
	/* End Position*/
	voidWriteData((y2)>>8);
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ffb5 	bl	80018a6 <voidWriteData>
	voidWriteData((y2) & 0x00ff);
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ffb0 	bl	80018a6 <voidWriteData>

}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bd90      	pop	{r4, r7, pc}

0800194e <TFT_vDrawPic>:

void TFT_vDrawPic(u8 x1,u8 x2,u16 y1,u16 y2, u16* Copy_Image)
{
 800194e:	b590      	push	{r4, r7, lr}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	4604      	mov	r4, r0
 8001956:	4608      	mov	r0, r1
 8001958:	4611      	mov	r1, r2
 800195a:	461a      	mov	r2, r3
 800195c:	4623      	mov	r3, r4
 800195e:	71fb      	strb	r3, [r7, #7]
 8001960:	4603      	mov	r3, r0
 8001962:	71bb      	strb	r3, [r7, #6]
 8001964:	460b      	mov	r3, r1
 8001966:	80bb      	strh	r3, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	807b      	strh	r3, [r7, #2]
	u32 Counter ;
	u32 Local_u32Size =( x2 - x1 ) * ( y2 - y1 ) ; /*calculate image element numbers*/
 800196c:	79ba      	ldrb	r2, [r7, #6]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	8879      	ldrh	r1, [r7, #2]
 8001974:	88ba      	ldrh	r2, [r7, #4]
 8001976:	1a8a      	subs	r2, r1, r2
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	60bb      	str	r3, [r7, #8]
	TFT_vSetCursorPosition(x1, y1, x2, y2);		  /*set addresses of x and y */
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	79ba      	ldrb	r2, [r7, #6]
 8001982:	88b9      	ldrh	r1, [r7, #4]
 8001984:	79f8      	ldrb	r0, [r7, #7]
 8001986:	f7ff ffa3 	bl	80018d0 <TFT_vSetCursorPosition>

	/* RAM Write Command Every thing is coming After This Command Display on TFT*/
	voidWriteCommand(0x2C);
 800198a:	202c      	movs	r0, #44	; 0x2c
 800198c:	f7ff ff76 	bl	800187c <voidWriteCommand>
	for(Counter = 0 ; Counter < Local_u32Size-5 ; Counter ++)	/*5 for protus*/
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	e016      	b.n	80019c4 <TFT_vDrawPic+0x76>
	{
		/* Write For One Pixel The High Byte Then Low Byte For Each Pixel */
		/* Write The High Byte */
		voidWriteData(Copy_Image[Counter] >> 8);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	6a3a      	ldr	r2, [r7, #32]
 800199c:	4413      	add	r3, r2
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff7d 	bl	80018a6 <voidWriteData>
		/* Write The LOW Byte */
		voidWriteData(Copy_Image[Counter] & 0x00ff);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	6a3a      	ldr	r2, [r7, #32]
 80019b2:	4413      	add	r3, r2
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff74 	bl	80018a6 <voidWriteData>
	for(Counter = 0 ; Counter < Local_u32Size-5 ; Counter ++)	/*5 for protus*/
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3301      	adds	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	3b05      	subs	r3, #5
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d3e3      	bcc.n	8001996 <TFT_vDrawPic+0x48>
	}
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd90      	pop	{r4, r7, pc}

080019d8 <TFT_vDrawRectangular>:

void TFT_vDrawRectangular( u8 x1,u8 x2,u16 y1,u16 y2,u16 Copy_u16Color)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4604      	mov	r4, r0
 80019e0:	4608      	mov	r0, r1
 80019e2:	4611      	mov	r1, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	71fb      	strb	r3, [r7, #7]
 80019ea:	4603      	mov	r3, r0
 80019ec:	71bb      	strb	r3, [r7, #6]
 80019ee:	460b      	mov	r3, r1
 80019f0:	80bb      	strh	r3, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	807b      	strh	r3, [r7, #2]
	u32 Counter ;
	u32 Local_u32Size =( x2 - x1 ) * ( y2 - y1 ) ; /*calculate image element numbers*/
 80019f6:	79ba      	ldrb	r2, [r7, #6]
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	8879      	ldrh	r1, [r7, #2]
 80019fe:	88ba      	ldrh	r2, [r7, #4]
 8001a00:	1a8a      	subs	r2, r1, r2
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	60bb      	str	r3, [r7, #8]
	TFT_vSetCursorPosition(x1, y1, x2, y2);		  /*set addresses of x and y */
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	79ba      	ldrb	r2, [r7, #6]
 8001a0c:	88b9      	ldrh	r1, [r7, #4]
 8001a0e:	79f8      	ldrb	r0, [r7, #7]
 8001a10:	f7ff ff5e 	bl	80018d0 <TFT_vSetCursorPosition>


	/* RAM Write Command Every thing is coming After This Command Display on TFT*/
	voidWriteCommand(0x2C);
 8001a14:	202c      	movs	r0, #44	; 0x2c
 8001a16:	f7ff ff31 	bl	800187c <voidWriteCommand>
	for(Counter = 0 ; Counter < Local_u32Size+5 ; Counter ++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	e00e      	b.n	8001a3e <TFT_vDrawRectangular+0x66>
	{
		/* Write For One Pixel The High Byte Then Low Byte For Each Pixel */
		/* Write The High Byte */
		voidWriteData(Copy_u16Color >> 8);
 8001a20:	8c3b      	ldrh	r3, [r7, #32]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff3c 	bl	80018a6 <voidWriteData>
		/* Write The LOW Byte */
		voidWriteData(Copy_u16Color &0x00ff);
 8001a2e:	8c3b      	ldrh	r3, [r7, #32]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff37 	bl	80018a6 <voidWriteData>
	for(Counter = 0 ; Counter < Local_u32Size+5 ; Counter ++)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	3305      	adds	r3, #5
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3eb      	bcc.n	8001a20 <TFT_vDrawRectangular+0x48>
	}
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd90      	pop	{r4, r7, pc}

08001a52 <TFT_vClearScreen>:

void TFT_vClearScreen(){
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af02      	add	r7, sp, #8
	TFT_vDrawRectangular(0, 240, 0, 300, 0xffff); /* if used all scren it should be 240 X 320 */
 8001a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001a62:	2200      	movs	r2, #0
 8001a64:	21f0      	movs	r1, #240	; 0xf0
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff ffb6 	bl	80019d8 <TFT_vDrawRectangular>
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <TFT_vDrawLeds>:

void TFT_vDrawLeds(){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af02      	add	r7, sp, #8
	u8 i =0 ;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	for(i = 0 ; i<6 ;i++){
 8001a7e:	2300      	movs	r3, #0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	e022      	b.n	8001aca <TFT_vDrawLeds+0x56>
		TFT_vDrawPic(LED1_x ,(LED1_x+LED_SIZE_X) ,lED1_Y ,(lED1_Y+LED_SIZE_Y) ,Led_off_pic);
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <TFT_vDrawLeds+0x68>)
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	233c      	movs	r3, #60	; 0x3c
 8001a8a:	2214      	movs	r2, #20
 8001a8c:	21e6      	movs	r1, #230	; 0xe6
 8001a8e:	20c8      	movs	r0, #200	; 0xc8
 8001a90:	f7ff ff5d 	bl	800194e <TFT_vDrawPic>
		TFT_vDrawPic(LED2_x ,(LED2_x+LED_SIZE_X) ,lED2_Y ,(lED2_Y+LED_SIZE_Y) ,Led_off_pic);
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <TFT_vDrawLeds+0x68>)
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	233c      	movs	r3, #60	; 0x3c
 8001a9a:	2214      	movs	r2, #20
 8001a9c:	21c8      	movs	r1, #200	; 0xc8
 8001a9e:	20aa      	movs	r0, #170	; 0xaa
 8001aa0:	f7ff ff55 	bl	800194e <TFT_vDrawPic>
		TFT_vDrawPic(LED3_x ,(LED3_x+LED_SIZE_X) ,lED3_Y ,(lED3_Y+LED_SIZE_Y) ,Led_off_pic);
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <TFT_vDrawLeds+0x68>)
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	233c      	movs	r3, #60	; 0x3c
 8001aaa:	2214      	movs	r2, #20
 8001aac:	21aa      	movs	r1, #170	; 0xaa
 8001aae:	208c      	movs	r0, #140	; 0x8c
 8001ab0:	f7ff ff4d 	bl	800194e <TFT_vDrawPic>
		TFT_vDrawPic(LED4_x ,(LED4_x+LED_SIZE_X) ,lED4_Y ,(lED4_Y+LED_SIZE_Y) ,Led_off_pic);
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <TFT_vDrawLeds+0x68>)
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	233c      	movs	r3, #60	; 0x3c
 8001aba:	2214      	movs	r2, #20
 8001abc:	218c      	movs	r1, #140	; 0x8c
 8001abe:	206e      	movs	r0, #110	; 0x6e
 8001ac0:	f7ff ff45 	bl	800194e <TFT_vDrawPic>
	for(i = 0 ; i<6 ;i++){
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d9d9      	bls.n	8001a84 <TFT_vDrawLeds+0x10>
		//TFT_vDrawPic(LED5_x ,(LED5_x+LED_SIZE_X) ,lED5_Y ,(lED5_Y+LED_SIZE_Y) ,Led_off_pic);
		//TFT_vDrawPic(LED6_x ,(LED6_x+LED_SIZE_X) ,lED6_Y ,(lED6_Y+LED_SIZE_Y) ,Led_off_pic);
	}

}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000000 	.word	0x20000000

08001ae0 <TFT_vToggle>:
	default: break;

	}
}

void TFT_vToggle(u8 led_num){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]

	u8 static ledTog[MAX_LED +1]= {0} ;   // +1 because we start from 1.

	if(ledTog[led_num] == LED_ON)
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <TFT_vToggle+0x110>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d104      	bne.n	8001afe <TFT_vToggle+0x1e>
	{
		ledTog[led_num] = LED_OFF;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4a3e      	ldr	r2, [pc, #248]	; (8001bf0 <TFT_vToggle+0x110>)
 8001af8:	2100      	movs	r1, #0
 8001afa:	54d1      	strb	r1, [r2, r3]
 8001afc:	e003      	b.n	8001b06 <TFT_vToggle+0x26>
	}
	else{
		ledTog[led_num] = LED_ON;
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <TFT_vToggle+0x110>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	54d1      	strb	r1, [r2, r3]
	}

	if (ledTog[led_num] == LED_ON)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4a39      	ldr	r2, [pc, #228]	; (8001bf0 <TFT_vToggle+0x110>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d133      	bne.n	8001b78 <TFT_vToggle+0x98>
	{
		switch (led_num)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d863      	bhi.n	8001be0 <TFT_vToggle+0x100>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <TFT_vToggle+0x40>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b31 	.word	0x08001b31
 8001b24:	08001b43 	.word	0x08001b43
 8001b28:	08001b55 	.word	0x08001b55
 8001b2c:	08001b67 	.word	0x08001b67
		{
		case 1: TFT_vDrawPic(LED1_x ,(LED1_x+LED_SIZE_X) ,lED1_Y ,(lED1_Y+LED_SIZE_Y) ,Led_on_pic); break;
 8001b30:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <TFT_vToggle+0x114>)
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	233c      	movs	r3, #60	; 0x3c
 8001b36:	2214      	movs	r2, #20
 8001b38:	21e6      	movs	r1, #230	; 0xe6
 8001b3a:	20c8      	movs	r0, #200	; 0xc8
 8001b3c:	f7ff ff07 	bl	800194e <TFT_vDrawPic>
 8001b40:	e051      	b.n	8001be6 <TFT_vToggle+0x106>
		case 2: TFT_vDrawPic(LED2_x ,(LED2_x+LED_SIZE_X) ,lED2_Y ,(lED2_Y+LED_SIZE_Y) ,Led_on_pic); break;
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <TFT_vToggle+0x114>)
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	233c      	movs	r3, #60	; 0x3c
 8001b48:	2214      	movs	r2, #20
 8001b4a:	21c8      	movs	r1, #200	; 0xc8
 8001b4c:	20aa      	movs	r0, #170	; 0xaa
 8001b4e:	f7ff fefe 	bl	800194e <TFT_vDrawPic>
 8001b52:	e048      	b.n	8001be6 <TFT_vToggle+0x106>
		case 3: TFT_vDrawPic(LED3_x ,(LED3_x+LED_SIZE_X) ,lED3_Y ,(lED3_Y+LED_SIZE_Y) ,Led_on_pic); break;
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <TFT_vToggle+0x114>)
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	233c      	movs	r3, #60	; 0x3c
 8001b5a:	2214      	movs	r2, #20
 8001b5c:	21aa      	movs	r1, #170	; 0xaa
 8001b5e:	208c      	movs	r0, #140	; 0x8c
 8001b60:	f7ff fef5 	bl	800194e <TFT_vDrawPic>
 8001b64:	e03f      	b.n	8001be6 <TFT_vToggle+0x106>
		case 4: TFT_vDrawPic(LED4_x ,(LED4_x+LED_SIZE_X) ,lED4_Y ,(lED4_Y+LED_SIZE_Y) ,Led_on_pic); break;
 8001b66:	4b23      	ldr	r3, [pc, #140]	; (8001bf4 <TFT_vToggle+0x114>)
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	233c      	movs	r3, #60	; 0x3c
 8001b6c:	2214      	movs	r2, #20
 8001b6e:	218c      	movs	r1, #140	; 0x8c
 8001b70:	206e      	movs	r0, #110	; 0x6e
 8001b72:	f7ff feec 	bl	800194e <TFT_vDrawPic>
 8001b76:	e036      	b.n	8001be6 <TFT_vToggle+0x106>
	//	case 6: TFT_vDrawPic(LED6_x ,(LED6_x+LED_SIZE_X) ,lED6_Y ,(lED6_Y+LED_SIZE_Y) ,Led_on_pic); break;
		default: break;
		}
	}
	else{
		switch (led_num)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d831      	bhi.n	8001be4 <TFT_vToggle+0x104>
 8001b80:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <TFT_vToggle+0xa8>)
 8001b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b86:	bf00      	nop
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001bab 	.word	0x08001bab
 8001b90:	08001bbd 	.word	0x08001bbd
 8001b94:	08001bcf 	.word	0x08001bcf
		{
		case 1: TFT_vDrawPic(LED1_x ,(LED1_x+LED_SIZE_X) ,lED1_Y ,(lED1_Y+LED_SIZE_Y) ,Led_off_pic); break;
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <TFT_vToggle+0x118>)
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	233c      	movs	r3, #60	; 0x3c
 8001b9e:	2214      	movs	r2, #20
 8001ba0:	21e6      	movs	r1, #230	; 0xe6
 8001ba2:	20c8      	movs	r0, #200	; 0xc8
 8001ba4:	f7ff fed3 	bl	800194e <TFT_vDrawPic>
 8001ba8:	e01d      	b.n	8001be6 <TFT_vToggle+0x106>
		case 2: TFT_vDrawPic(LED2_x ,(LED2_x+LED_SIZE_X) ,lED2_Y ,(lED2_Y+LED_SIZE_Y) ,Led_off_pic); break;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <TFT_vToggle+0x118>)
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	233c      	movs	r3, #60	; 0x3c
 8001bb0:	2214      	movs	r2, #20
 8001bb2:	21c8      	movs	r1, #200	; 0xc8
 8001bb4:	20aa      	movs	r0, #170	; 0xaa
 8001bb6:	f7ff feca 	bl	800194e <TFT_vDrawPic>
 8001bba:	e014      	b.n	8001be6 <TFT_vToggle+0x106>
		case 3: TFT_vDrawPic(LED3_x ,(LED3_x+LED_SIZE_X) ,lED3_Y ,(lED3_Y+LED_SIZE_Y) ,Led_off_pic); break;
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <TFT_vToggle+0x118>)
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	233c      	movs	r3, #60	; 0x3c
 8001bc2:	2214      	movs	r2, #20
 8001bc4:	21aa      	movs	r1, #170	; 0xaa
 8001bc6:	208c      	movs	r0, #140	; 0x8c
 8001bc8:	f7ff fec1 	bl	800194e <TFT_vDrawPic>
 8001bcc:	e00b      	b.n	8001be6 <TFT_vToggle+0x106>
		case 4: TFT_vDrawPic(LED4_x ,(LED4_x+LED_SIZE_X) ,lED4_Y ,(lED4_Y+LED_SIZE_Y) ,Led_off_pic); break;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <TFT_vToggle+0x118>)
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	233c      	movs	r3, #60	; 0x3c
 8001bd4:	2214      	movs	r2, #20
 8001bd6:	218c      	movs	r1, #140	; 0x8c
 8001bd8:	206e      	movs	r0, #110	; 0x6e
 8001bda:	f7ff feb8 	bl	800194e <TFT_vDrawPic>
 8001bde:	e002      	b.n	8001be6 <TFT_vToggle+0x106>
		default: break;
 8001be0:	bf00      	nop
 8001be2:	e000      	b.n	8001be6 <TFT_vToggle+0x106>
	//	case 5: TFT_vDrawPic(LED5_x ,(LED5_x+LED_SIZE_X) ,lED5_Y ,(lED5_Y+LED_SIZE_Y) ,Led_off_pic); break;
	//	case 6: TFT_vDrawPic(LED6_x ,(LED6_x+LED_SIZE_X) ,lED6_Y ,(lED6_Y+LED_SIZE_Y) ,Led_off_pic); break;
		default: break;
 8001be4:	bf00      	nop

		}
	}
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20001438 	.word	0x20001438
 8001bf4:	200009b0 	.word	0x200009b0
 8001bf8:	20000000 	.word	0x20000000

08001bfc <TFT_vDoorOpened>:

void TFT_vDoorOpened()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af02      	add	r7, sp, #8
	TFT_vDrawPic(door_x ,door_x+door_size_x ,door_y ,door_y+door_size_y ,DoorOpened);
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <TFT_vDoorOpened+0x1c>)
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2391      	movs	r3, #145	; 0x91
 8001c08:	2250      	movs	r2, #80	; 0x50
 8001c0a:	21e6      	movs	r1, #230	; 0xe6
 8001c0c:	2082      	movs	r0, #130	; 0x82
 8001c0e:	f7ff fe9e 	bl	800194e <TFT_vDrawPic>
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	08009f30 	.word	0x08009f30

08001c1c <TFT_vDoorClosed>:

void TFT_vDoorClosed()
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af02      	add	r7, sp, #8
	TFT_vDrawPic(door_x ,door_x+door_size_x ,door_y ,door_y+door_size_y ,DoorClosed);
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <TFT_vDoorClosed+0x1c>)
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2391      	movs	r3, #145	; 0x91
 8001c28:	2250      	movs	r2, #80	; 0x50
 8001c2a:	21e6      	movs	r1, #230	; 0xe6
 8001c2c:	2082      	movs	r0, #130	; 0x82
 8001c2e:	f7ff fe8e 	bl	800194e <TFT_vDrawPic>
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	08006400 	.word	0x08006400

08001c3c <TFT_vDrawAirConditioner>:

void TFT_vDrawAirConditioner()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af02      	add	r7, sp, #8
	TFT_vDrawPic(AC_X ,AC_X + AC_SIZE_X ,AC_Y ,AC_Y+AC_SIZE_Y ,AirConditioner);
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <TFT_vDrawAirConditioner+0x1c>)
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	23da      	movs	r3, #218	; 0xda
 8001c48:	22a8      	movs	r2, #168	; 0xa8
 8001c4a:	21eb      	movs	r1, #235	; 0xeb
 8001c4c:	20a0      	movs	r0, #160	; 0xa0
 8001c4e:	f7ff fe7e 	bl	800194e <TFT_vDrawPic>

}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	0800da60 	.word	0x0800da60

08001c5c <TFT_vDrawAcButton>:
{
	TFT_vDrawRectangular(AC_X +10 ,AC_X +15 ,AC_Y +15 ,AC_Y +20 ,0x00ff); /*green idicatoion for on */

}

void TFT_vDrawAcButton(){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

	TFT_vDrawUpTriangle(BUTTON1_UP_X, BUTTON1_UP_Y,BUTTON1_UP_SIZE ,BUTTON1_UP_COLOR);
 8001c60:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001c64:	220c      	movs	r2, #12
 8001c66:	21b9      	movs	r1, #185	; 0xb9
 8001c68:	207c      	movs	r0, #124	; 0x7c
 8001c6a:	f000 fb1f 	bl	80022ac <TFT_vDrawUpTriangle>
	TFT_vDrawDownTriangle(BUTTON1_DOWN_X, BUTTON1_DOWN_Y,BUTTON1_DOWN_SIZE ,BUTTON2_DOWN_COLOR);
 8001c6e:	f64f 6386 	movw	r3, #65158	; 0xfe86
 8001c72:	220c      	movs	r2, #12
 8001c74:	21be      	movs	r1, #190	; 0xbe
 8001c76:	207c      	movs	r0, #124	; 0x7c
 8001c78:	f000 fb4a 	bl	8002310 <TFT_vDrawDownTriangle>

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <TFT_vNumberAtPosition>:

void TFT_vNumberAtPosition(u8 x,u8 y,u8 num){
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	717b      	strb	r3, [r7, #5]
	switch (num){
 8001c92:	797b      	ldrb	r3, [r7, #5]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	f200 809d 	bhi.w	8001dd6 <TFT_vNumberAtPosition+0x156>
 8001c9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <TFT_vNumberAtPosition+0x24>)
 8001c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca2:	bf00      	nop
 8001ca4:	08001cc9 	.word	0x08001cc9
 8001ca8:	08001ce7 	.word	0x08001ce7
 8001cac:	08001d05 	.word	0x08001d05
 8001cb0:	08001d23 	.word	0x08001d23
 8001cb4:	08001d41 	.word	0x08001d41
 8001cb8:	08001d5f 	.word	0x08001d5f
 8001cbc:	08001d7d 	.word	0x08001d7d
 8001cc0:	08001d9b 	.word	0x08001d9b
 8001cc4:	08001db9 	.word	0x08001db9
	case 1 : TFT_vDrawPicturesPixels (x ,x+NUM_X_SIZE ,y ,y+NUM_Y_SIZE ,Num1); break;
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	330a      	adds	r3, #10
 8001ccc:	b2d9      	uxtb	r1, r3
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	79bb      	ldrb	r3, [r7, #6]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	330a      	adds	r3, #10
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	79f8      	ldrb	r0, [r7, #7]
 8001cdc:	4c40      	ldr	r4, [pc, #256]	; (8001de0 <TFT_vNumberAtPosition+0x160>)
 8001cde:	9400      	str	r4, [sp, #0]
 8001ce0:	f000 fa98 	bl	8002214 <TFT_vDrawPicturesPixels>
 8001ce4:	e078      	b.n	8001dd8 <TFT_vNumberAtPosition+0x158>
	case 2 : TFT_vDrawPicturesPixels (x ,x+NUM_X_SIZE ,y ,y+NUM_Y_SIZE ,Num2); break;
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	330a      	adds	r3, #10
 8001cea:	b2d9      	uxtb	r1, r3
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	79bb      	ldrb	r3, [r7, #6]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	330a      	adds	r3, #10
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	79f8      	ldrb	r0, [r7, #7]
 8001cfa:	4c3a      	ldr	r4, [pc, #232]	; (8001de4 <TFT_vNumberAtPosition+0x164>)
 8001cfc:	9400      	str	r4, [sp, #0]
 8001cfe:	f000 fa89 	bl	8002214 <TFT_vDrawPicturesPixels>
 8001d02:	e069      	b.n	8001dd8 <TFT_vNumberAtPosition+0x158>
	case 3 : TFT_vDrawPicturesPixels (x ,x+NUM_X_SIZE ,y ,y+NUM_Y_SIZE ,Num3); break;
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	330a      	adds	r3, #10
 8001d08:	b2d9      	uxtb	r1, r3
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	79bb      	ldrb	r3, [r7, #6]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	330a      	adds	r3, #10
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	79f8      	ldrb	r0, [r7, #7]
 8001d18:	4c33      	ldr	r4, [pc, #204]	; (8001de8 <TFT_vNumberAtPosition+0x168>)
 8001d1a:	9400      	str	r4, [sp, #0]
 8001d1c:	f000 fa7a 	bl	8002214 <TFT_vDrawPicturesPixels>
 8001d20:	e05a      	b.n	8001dd8 <TFT_vNumberAtPosition+0x158>
	case 4 : TFT_vDrawPicturesPixels (x ,x+NUM_X_SIZE ,y ,y+NUM_Y_SIZE ,Num4); break;
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	330a      	adds	r3, #10
 8001d26:	b2d9      	uxtb	r1, r3
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	79bb      	ldrb	r3, [r7, #6]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	330a      	adds	r3, #10
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	79f8      	ldrb	r0, [r7, #7]
 8001d36:	4c2d      	ldr	r4, [pc, #180]	; (8001dec <TFT_vNumberAtPosition+0x16c>)
 8001d38:	9400      	str	r4, [sp, #0]
 8001d3a:	f000 fa6b 	bl	8002214 <TFT_vDrawPicturesPixels>
 8001d3e:	e04b      	b.n	8001dd8 <TFT_vNumberAtPosition+0x158>
	case 5 : TFT_vDrawPicturesPixels (x ,x+NUM_X_SIZE ,y ,y+NUM_Y_SIZE ,Num5); break;
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	330a      	adds	r3, #10
 8001d44:	b2d9      	uxtb	r1, r3
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	330a      	adds	r3, #10
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	79f8      	ldrb	r0, [r7, #7]
 8001d54:	4c26      	ldr	r4, [pc, #152]	; (8001df0 <TFT_vNumberAtPosition+0x170>)
 8001d56:	9400      	str	r4, [sp, #0]
 8001d58:	f000 fa5c 	bl	8002214 <TFT_vDrawPicturesPixels>
 8001d5c:	e03c      	b.n	8001dd8 <TFT_vNumberAtPosition+0x158>
	case 6 : TFT_vDrawPicturesPixels (x ,x+NUM_X_SIZE ,y ,y+NUM_Y_SIZE ,Num6); break;
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	330a      	adds	r3, #10
 8001d62:	b2d9      	uxtb	r1, r3
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	79bb      	ldrb	r3, [r7, #6]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	330a      	adds	r3, #10
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	79f8      	ldrb	r0, [r7, #7]
 8001d72:	4c20      	ldr	r4, [pc, #128]	; (8001df4 <TFT_vNumberAtPosition+0x174>)
 8001d74:	9400      	str	r4, [sp, #0]
 8001d76:	f000 fa4d 	bl	8002214 <TFT_vDrawPicturesPixels>
 8001d7a:	e02d      	b.n	8001dd8 <TFT_vNumberAtPosition+0x158>
	case 7 : TFT_vDrawPicturesPixels (x ,x+NUM_X_SIZE ,y ,y+NUM_Y_SIZE ,Num7); break;
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	330a      	adds	r3, #10
 8001d80:	b2d9      	uxtb	r1, r3
 8001d82:	79bb      	ldrb	r3, [r7, #6]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	330a      	adds	r3, #10
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	79f8      	ldrb	r0, [r7, #7]
 8001d90:	4c19      	ldr	r4, [pc, #100]	; (8001df8 <TFT_vNumberAtPosition+0x178>)
 8001d92:	9400      	str	r4, [sp, #0]
 8001d94:	f000 fa3e 	bl	8002214 <TFT_vDrawPicturesPixels>
 8001d98:	e01e      	b.n	8001dd8 <TFT_vNumberAtPosition+0x158>
	case 8 : TFT_vDrawPicturesPixels (x ,x+NUM_X_SIZE ,y ,y+NUM_Y_SIZE ,Num8); break;
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	330a      	adds	r3, #10
 8001d9e:	b2d9      	uxtb	r1, r3
 8001da0:	79bb      	ldrb	r3, [r7, #6]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	79bb      	ldrb	r3, [r7, #6]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	330a      	adds	r3, #10
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	79f8      	ldrb	r0, [r7, #7]
 8001dae:	4c13      	ldr	r4, [pc, #76]	; (8001dfc <TFT_vNumberAtPosition+0x17c>)
 8001db0:	9400      	str	r4, [sp, #0]
 8001db2:	f000 fa2f 	bl	8002214 <TFT_vDrawPicturesPixels>
 8001db6:	e00f      	b.n	8001dd8 <TFT_vNumberAtPosition+0x158>
	case 9 : TFT_vDrawPicturesPixels (x ,x+NUM_X_SIZE ,y ,y+NUM_Y_SIZE ,Num9); break;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	330a      	adds	r3, #10
 8001dbc:	b2d9      	uxtb	r1, r3
 8001dbe:	79bb      	ldrb	r3, [r7, #6]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	79bb      	ldrb	r3, [r7, #6]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	330a      	adds	r3, #10
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	79f8      	ldrb	r0, [r7, #7]
 8001dcc:	4c0c      	ldr	r4, [pc, #48]	; (8001e00 <TFT_vNumberAtPosition+0x180>)
 8001dce:	9400      	str	r4, [sp, #0]
 8001dd0:	f000 fa20 	bl	8002214 <TFT_vDrawPicturesPixels>
 8001dd4:	e000      	b.n	8001dd8 <TFT_vNumberAtPosition+0x158>
	default:  break ;
 8001dd6:	bf00      	nop

	}
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	08002c74 	.word	0x08002c74
 8001de4:	08002d3c 	.word	0x08002d3c
 8001de8:	08002e04 	.word	0x08002e04
 8001dec:	08002ecc 	.word	0x08002ecc
 8001df0:	08002f94 	.word	0x08002f94
 8001df4:	0800305c 	.word	0x0800305c
 8001df8:	08003124 	.word	0x08003124
 8001dfc:	080031ec 	.word	0x080031ec
 8001e00:	080032b4 	.word	0x080032b4

08001e04 <TFT_vDrawTempValue>:

void TFT_vDrawTempValue(u16 Num){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
	u8 mod;


	if(Num<9){
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d807      	bhi.n	8001e24 <TFT_vDrawTempValue+0x20>
		TFT_vNumberAtPosition(NUM_X,NUM_y,Num);
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	21af      	movs	r1, #175	; 0xaf
 8001e1c:	20d2      	movs	r0, #210	; 0xd2
 8001e1e:	f7ff ff2f 	bl	8001c80 <TFT_vNumberAtPosition>
		Num/=10;
		TFT_vNumberAtPosition(NUM_X + NUM_SPACE *2,NUM_y,Num);

	}

}
 8001e22:	e05e      	b.n	8001ee2 <TFT_vDrawTempValue+0xde>
	else if (Num<99)
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	2b62      	cmp	r3, #98	; 0x62
 8001e28:	d81f      	bhi.n	8001e6a <TFT_vDrawTempValue+0x66>
		mod = Num % 10;
 8001e2a:	88fa      	ldrh	r2, [r7, #6]
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <TFT_vDrawTempValue+0xe8>)
 8001e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e32:	08d9      	lsrs	r1, r3, #3
 8001e34:	460b      	mov	r3, r1
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	73fb      	strb	r3, [r7, #15]
		TFT_vNumberAtPosition(NUM_X,NUM_y,mod);
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	461a      	mov	r2, r3
 8001e46:	21af      	movs	r1, #175	; 0xaf
 8001e48:	20d2      	movs	r0, #210	; 0xd2
 8001e4a:	f7ff ff19 	bl	8001c80 <TFT_vNumberAtPosition>
		Num/=10;
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	4a26      	ldr	r2, [pc, #152]	; (8001eec <TFT_vDrawTempValue+0xe8>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	08db      	lsrs	r3, r3, #3
 8001e58:	80fb      	strh	r3, [r7, #6]
		TFT_vNumberAtPosition(NUM_X + NUM_SPACE,NUM_y,Num);
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	21af      	movs	r1, #175	; 0xaf
 8001e62:	20dc      	movs	r0, #220	; 0xdc
 8001e64:	f7ff ff0c 	bl	8001c80 <TFT_vNumberAtPosition>
}
 8001e68:	e03b      	b.n	8001ee2 <TFT_vDrawTempValue+0xde>
	else if (Num<999)
 8001e6a:	88fb      	ldrh	r3, [r7, #6]
 8001e6c:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d836      	bhi.n	8001ee2 <TFT_vDrawTempValue+0xde>
		mod = Num % 10;
 8001e74:	88fa      	ldrh	r2, [r7, #6]
 8001e76:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <TFT_vDrawTempValue+0xe8>)
 8001e78:	fba3 1302 	umull	r1, r3, r3, r2
 8001e7c:	08d9      	lsrs	r1, r3, #3
 8001e7e:	460b      	mov	r3, r1
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	73fb      	strb	r3, [r7, #15]
		TFT_vNumberAtPosition(NUM_X,NUM_y,mod);
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	21af      	movs	r1, #175	; 0xaf
 8001e92:	20d2      	movs	r0, #210	; 0xd2
 8001e94:	f7ff fef4 	bl	8001c80 <TFT_vNumberAtPosition>
		Num/=10;
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <TFT_vDrawTempValue+0xe8>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	80fb      	strh	r3, [r7, #6]
		mod = Num % 10;
 8001ea4:	88fa      	ldrh	r2, [r7, #6]
 8001ea6:	4b11      	ldr	r3, [pc, #68]	; (8001eec <TFT_vDrawTempValue+0xe8>)
 8001ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8001eac:	08d9      	lsrs	r1, r3, #3
 8001eae:	460b      	mov	r3, r1
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	73fb      	strb	r3, [r7, #15]
		TFT_vNumberAtPosition(NUM_X+ NUM_SPACE,NUM_y,mod);
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	21af      	movs	r1, #175	; 0xaf
 8001ec2:	20dc      	movs	r0, #220	; 0xdc
 8001ec4:	f7ff fedc 	bl	8001c80 <TFT_vNumberAtPosition>
		Num/=10;
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <TFT_vDrawTempValue+0xe8>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	08db      	lsrs	r3, r3, #3
 8001ed2:	80fb      	strh	r3, [r7, #6]
		TFT_vNumberAtPosition(NUM_X + NUM_SPACE *2,NUM_y,Num);
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	21af      	movs	r1, #175	; 0xaf
 8001edc:	20e6      	movs	r0, #230	; 0xe6
 8001ede:	f7ff fecf 	bl	8001c80 <TFT_vNumberAtPosition>
}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	cccccccd 	.word	0xcccccccd

08001ef0 <TFT_vDrawDimmerLed>:


void TFT_vDrawDimmerLed()
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af02      	add	r7, sp, #8
	TFT_vDrawPic(LED_DIMMER_X,LED_DIMMER_X +LED_DIMMER_SIZE_X ,LED_DIMMER_Y, LED_DIMMER_Y+LED_DIMMER_SIZE_Y ,Dimmer_Led);
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <TFT_vDrawDimmerLed+0x1c>)
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	233c      	movs	r3, #60	; 0x3c
 8001efc:	2214      	movs	r2, #20
 8001efe:	2150      	movs	r1, #80	; 0x50
 8001f00:	2032      	movs	r0, #50	; 0x32
 8001f02:	f7ff fd24 	bl	800194e <TFT_vDrawPic>

}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	0800337c 	.word	0x0800337c

08001f10 <TFT_vControlDimmerLed>:

void TFT_vControlDimmerLed( u8 Copy_u8PwmValue){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
	u32 Counter ;
	u16 color =0x0000;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	827b      	strh	r3, [r7, #18]
	u32 Local_u32Size = LED_DIMMER_SIZE_X  *  LED_DIMMER_SIZE_Y ;
 8001f1e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001f22:	60fb      	str	r3, [r7, #12]
	TFT_vSetCursorPosition(LED_DIMMER_X,LED_DIMMER_Y ,(LED_DIMMER_X + LED_DIMMER_SIZE_X),(LED_DIMMER_Y+LED_DIMMER_SIZE_Y ));
 8001f24:	233c      	movs	r3, #60	; 0x3c
 8001f26:	2250      	movs	r2, #80	; 0x50
 8001f28:	2114      	movs	r1, #20
 8001f2a:	2032      	movs	r0, #50	; 0x32
 8001f2c:	f7ff fcd0 	bl	80018d0 <TFT_vSetCursorPosition>

	voidWriteCommand(0x2C);
 8001f30:	202c      	movs	r0, #44	; 0x2c
 8001f32:	f7ff fca3 	bl	800187c <voidWriteCommand>


	switch (Copy_u8PwmValue)
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	2bfa      	cmp	r3, #250	; 0xfa
 8001f3a:	d021      	beq.n	8001f80 <TFT_vControlDimmerLed+0x70>
 8001f3c:	2bfa      	cmp	r3, #250	; 0xfa
 8001f3e:	dc22      	bgt.n	8001f86 <TFT_vControlDimmerLed+0x76>
 8001f40:	2bc8      	cmp	r3, #200	; 0xc8
 8001f42:	d01a      	beq.n	8001f7a <TFT_vControlDimmerLed+0x6a>
 8001f44:	2bc8      	cmp	r3, #200	; 0xc8
 8001f46:	dc1e      	bgt.n	8001f86 <TFT_vControlDimmerLed+0x76>
 8001f48:	2b96      	cmp	r3, #150	; 0x96
 8001f4a:	d013      	beq.n	8001f74 <TFT_vControlDimmerLed+0x64>
 8001f4c:	2b96      	cmp	r3, #150	; 0x96
 8001f4e:	dc1a      	bgt.n	8001f86 <TFT_vControlDimmerLed+0x76>
 8001f50:	2b64      	cmp	r3, #100	; 0x64
 8001f52:	d00c      	beq.n	8001f6e <TFT_vControlDimmerLed+0x5e>
 8001f54:	2b64      	cmp	r3, #100	; 0x64
 8001f56:	dc16      	bgt.n	8001f86 <TFT_vControlDimmerLed+0x76>
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d002      	beq.n	8001f62 <TFT_vControlDimmerLed+0x52>
 8001f5c:	2b32      	cmp	r3, #50	; 0x32
 8001f5e:	d003      	beq.n	8001f68 <TFT_vControlDimmerLed+0x58>
 8001f60:	e011      	b.n	8001f86 <TFT_vControlDimmerLed+0x76>
	{
	case 0		: color = 0x0000; break ; /*black*/
 8001f62:	2300      	movs	r3, #0
 8001f64:	827b      	strh	r3, [r7, #18]
 8001f66:	e011      	b.n	8001f8c <TFT_vControlDimmerLed+0x7c>
	case 50		: color = 0x00f2; break ;
 8001f68:	23f2      	movs	r3, #242	; 0xf2
 8001f6a:	827b      	strh	r3, [r7, #18]
 8001f6c:	e00e      	b.n	8001f8c <TFT_vControlDimmerLed+0x7c>
	case 100	: color = 0x00f5; break ;
 8001f6e:	23f5      	movs	r3, #245	; 0xf5
 8001f70:	827b      	strh	r3, [r7, #18]
 8001f72:	e00b      	b.n	8001f8c <TFT_vControlDimmerLed+0x7c>
	case 150	: color = 0x00f7; break ;
 8001f74:	23f7      	movs	r3, #247	; 0xf7
 8001f76:	827b      	strh	r3, [r7, #18]
 8001f78:	e008      	b.n	8001f8c <TFT_vControlDimmerLed+0x7c>
	case 200	: color = 0x00f9; break ;
 8001f7a:	23f9      	movs	r3, #249	; 0xf9
 8001f7c:	827b      	strh	r3, [r7, #18]
 8001f7e:	e005      	b.n	8001f8c <TFT_vControlDimmerLed+0x7c>
	case 250	: color = 0x00ff; break ;
 8001f80:	23ff      	movs	r3, #255	; 0xff
 8001f82:	827b      	strh	r3, [r7, #18]
 8001f84:	e002      	b.n	8001f8c <TFT_vControlDimmerLed+0x7c>
	default 	: color = 0x0000;  break;
 8001f86:	2300      	movs	r3, #0
 8001f88:	827b      	strh	r3, [r7, #18]
 8001f8a:	bf00      	nop
	}
	for(Counter = 0 ; Counter < Local_u32Size -6  ; Counter ++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e01b      	b.n	8001fca <TFT_vControlDimmerLed+0xba>
	{
		if(Dimmer_Led [ Counter] == 0x0000) /*find the lightining element of the led */
 8001f92:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <TFT_vControlDimmerLed+0xd0>)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <TFT_vControlDimmerLed+0xa8>
		{
			voidWriteData((color)>> 8);				/* value varies  from 0x0000 to 0x00ff which is max red color */
 8001f9e:	8a7b      	ldrh	r3, [r7, #18]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fc7d 	bl	80018a6 <voidWriteData>
			voidWriteData(color & 0x00ff);
 8001fac:	8a7b      	ldrh	r3, [r7, #18]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fc78 	bl	80018a6 <voidWriteData>
 8001fb6:	e005      	b.n	8001fc4 <TFT_vControlDimmerLed+0xb4>
		}
		else
		{
			voidWriteData(0xffff >> 8);
 8001fb8:	20ff      	movs	r0, #255	; 0xff
 8001fba:	f7ff fc74 	bl	80018a6 <voidWriteData>
			voidWriteData(0xffff & 0x00ff);
 8001fbe:	20ff      	movs	r0, #255	; 0xff
 8001fc0:	f7ff fc71 	bl	80018a6 <voidWriteData>
	for(Counter = 0 ; Counter < Local_u32Size -6  ; Counter ++)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3b06      	subs	r3, #6
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3de      	bcc.n	8001f92 <TFT_vControlDimmerLed+0x82>

	}



}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	0800337c 	.word	0x0800337c

08001fe4 <TFT_vDrawChangePassButton>:


void TFT_vDrawChangePassButton(){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af02      	add	r7, sp, #8
TFT_vDrawPic(CHANGE_PASS_BUTT_X ,(CHANGE_PASS_BUTT_X+CHANGE_PASS_BUTT_X_SIZE) ,CHANGE_PASS_BUTT_Y ,(CHANGE_PASS_BUTT_Y + CHANGE_PASS_BUTT_Y_SIZE) ,ChangePAsswordPic);
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <TFT_vDrawChangePassButton+0x1c>)
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	23f7      	movs	r3, #247	; 0xf7
 8001ff0:	22dc      	movs	r2, #220	; 0xdc
 8001ff2:	2169      	movs	r1, #105	; 0x69
 8001ff4:	200a      	movs	r0, #10
 8001ff6:	f7ff fcaa 	bl	800194e <TFT_vDrawPic>

}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	0802863c 	.word	0x0802863c

08002004 <TFT_vUserPanel>:
void TFT_vUserPanel(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	TFT_vClearScreen();
 8002008:	f7ff fd23 	bl	8001a52 <TFT_vClearScreen>
	TFT_vDrawLeds();
 800200c:	f7ff fd32 	bl	8001a74 <TFT_vDrawLeds>
	TFT_vDoorClosed();
 8002010:	f7ff fe04 	bl	8001c1c <TFT_vDoorClosed>
	TFT_vDrawAcButton();
 8002014:	f7ff fe22 	bl	8001c5c <TFT_vDrawAcButton>
	TFT_vDrawAirConditioner();
 8002018:	f7ff fe10 	bl	8001c3c <TFT_vDrawAirConditioner>
	TFT_vDrawDimmerLed();
 800201c:	f7ff ff68 	bl	8001ef0 <TFT_vDrawDimmerLed>
	TFT_vDrawChangePassButton();
 8002020:	f7ff ffe0 	bl	8001fe4 <TFT_vDrawChangePassButton>
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}

08002028 <TFT_vDrawPassword>:




void TFT_vDrawPassword(u8 Copy_u8PasswordIndex){
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
	TFT_vDrawStar(PASS_X+(Copy_u8PasswordIndex*PASS_SPACE),PASS_Y,STAR_SIZE,STAR_COLOR);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	461a      	mov	r2, r3
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	4413      	add	r3, r2
 800203a:	b2db      	uxtb	r3, r3
 800203c:	334b      	adds	r3, #75	; 0x4b
 800203e:	b2d8      	uxtb	r0, r3
 8002040:	2310      	movs	r3, #16
 8002042:	220b      	movs	r2, #11
 8002044:	21b5      	movs	r1, #181	; 0xb5
 8002046:	f000 f995 	bl	8002374 <TFT_vDrawStar>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <HTFT_vDrawKeyPad>:
	TFT_vDrawStar(PASS_X+(Copy_u8PasswordIndex*PASS_SPACE),PASS_Y,STAR_SIZE,0xffff);// clearing it with sending color with while
}


void HTFT_vDrawKeyPad()
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af02      	add	r7, sp, #8

	TFT_vDrawPic(KEYPAD_X, KEYPAD_X+KEYPAD_X_SIZE, KEYPAD_Y, KEYPAD_Y+KEYPAD_Y_SIZE, KeyPadPic);
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HTFT_vDrawKeyPad+0x1c>)
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	23f8      	movs	r3, #248	; 0xf8
 8002060:	22c8      	movs	r2, #200	; 0xc8
 8002062:	21c0      	movs	r1, #192	; 0xc0
 8002064:	2034      	movs	r0, #52	; 0x34
 8002066:	f7ff fc72 	bl	800194e <TFT_vDrawPic>
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	08029a7c 	.word	0x08029a7c

08002074 <TFT_vPasswordPanel>:

void TFT_vPasswordPanel()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af02      	add	r7, sp, #8
	TFT_vClearScreen();
 800207a:	f7ff fcea 	bl	8001a52 <TFT_vClearScreen>
	TFT_vDrawPic(PASS_PIC_X ,PASS_PIC_X+PASS_PIC_X_SIZE ,PASS_PIC_Y,PASS_PIC_Y+PASS_PIC_Y_SIZE, PassScreen);			/*for password picture*/
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <TFT_vPasswordPanel+0x24>)
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	23c3      	movs	r3, #195	; 0xc3
 8002084:	227d      	movs	r2, #125	; 0x7d
 8002086:	219b      	movs	r1, #155	; 0x9b
 8002088:	2055      	movs	r0, #85	; 0x55
 800208a:	f7ff fc60 	bl	800194e <TFT_vDrawPic>
	HTFT_vDrawKeyPad();
 800208e:	f7ff ffe1 	bl	8002054 <HTFT_vDrawKeyPad>
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	08003d2c 	.word	0x08003d2c

0800209c <TFT_vTrialLeft>:


void TFT_vTrialLeft(u8 Copy_u8LeftTrials){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]

	TFT_vDrawPic(TRIAL_PIC_X ,TRIAL_PIC_X+TRIAL_PIC_X_SIZE ,TRIAL_PIC_Y,TRIAL_PIC_Y+TRIAL_PIC_Y_SIZE, TrialsLeftPic);
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <TFT_vTrialLeft+0x30>)
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	235f      	movs	r3, #95	; 0x5f
 80020ac:	2246      	movs	r2, #70	; 0x46
 80020ae:	2196      	movs	r1, #150	; 0x96
 80020b0:	2050      	movs	r0, #80	; 0x50
 80020b2:	f7ff fc4c 	bl	800194e <TFT_vDrawPic>
	TFT_vNumberAtPosition(TRIAL_NUM_X, TRIAL_NUM_Y, Copy_u8LeftTrials);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	461a      	mov	r2, r3
 80020ba:	214b      	movs	r1, #75	; 0x4b
 80020bc:	2096      	movs	r0, #150	; 0x96
 80020be:	f7ff fddf 	bl	8001c80 <TFT_vNumberAtPosition>

}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	0802785c 	.word	0x0802785c

080020d0 <TFT_vChangePasswordPanel>:
void TFT_vChangePasswordPanel(){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af02      	add	r7, sp, #8
TFT_vClearScreen();
 80020d6:	f7ff fcbc 	bl	8001a52 <TFT_vClearScreen>
TFT_vDrawPic(NEW_PASS_X ,(NEW_PASS_X+NEW_PASS_X_SIZE) ,NEW_PASS_Y ,(NEW_PASS_Y + NEW_PASS_Y_SIZE) ,NewPassword);
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <TFT_vChangePasswordPanel+0x34>)
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2368      	movs	r3, #104	; 0x68
 80020e0:	2237      	movs	r2, #55	; 0x37
 80020e2:	21b4      	movs	r1, #180	; 0xb4
 80020e4:	203c      	movs	r0, #60	; 0x3c
 80020e6:	f7ff fc32 	bl	800194e <TFT_vDrawPic>
TFT_vDrawPic(PASS_PIC_X ,PASS_PIC_X+PASS_PIC_X_SIZE ,PASS_PIC_Y,PASS_PIC_Y+PASS_PIC_Y_SIZE, PassScreen);			/*for password picture*/
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <TFT_vChangePasswordPanel+0x38>)
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	23c3      	movs	r3, #195	; 0xc3
 80020f0:	227d      	movs	r2, #125	; 0x7d
 80020f2:	219b      	movs	r1, #155	; 0x9b
 80020f4:	2055      	movs	r0, #85	; 0x55
 80020f6:	f7ff fc2a 	bl	800194e <TFT_vDrawPic>
HTFT_vDrawKeyPad();
 80020fa:	f7ff ffab 	bl	8002054 <HTFT_vDrawKeyPad>
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	08024a08 	.word	0x08024a08
 8002108:	08003d2c 	.word	0x08003d2c

0800210c <TFT_vPolicePanel>:



void TFT_vPolicePanel()
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af02      	add	r7, sp, #8
	TFT_vClearScreen();
 8002112:	f7ff fc9e 	bl	8001a52 <TFT_vClearScreen>
	TFT_vDrawPic(POLICE_X ,POLICE_X+POLICE_SIZE_X ,POLICE_Y,POLICE_Y+POLICE_SIZE_Y, Police);
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <TFT_vPolicePanel+0x20>)
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	23f0      	movs	r3, #240	; 0xf0
 800211c:	221e      	movs	r2, #30
 800211e:	21dc      	movs	r1, #220	; 0xdc
 8002120:	200f      	movs	r0, #15
 8002122:	f7ff fc14 	bl	800194e <TFT_vDrawPic>

}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	0800f810 	.word	0x0800f810

08002130 <TFT_vDrawPixel>:

void TFT_vDrawPixel(u8 x,u16 y, u16 color){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	460b      	mov	r3, r1
 800213c:	80bb      	strh	r3, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	807b      	strh	r3, [r7, #2]
	TFT_vSetCursorPosition(x,y,x,y);
 8002142:	88bb      	ldrh	r3, [r7, #4]
 8002144:	79fa      	ldrb	r2, [r7, #7]
 8002146:	88b9      	ldrh	r1, [r7, #4]
 8002148:	79f8      	ldrb	r0, [r7, #7]
 800214a:	f7ff fbc1 	bl	80018d0 <TFT_vSetCursorPosition>
	/* RAM Write Command Every thing is coming After This Command Display on TFT*/
	voidWriteCommand(0x2C);
 800214e:	202c      	movs	r0, #44	; 0x2c
 8002150:	f7ff fb94 	bl	800187c <voidWriteCommand>
	/* Write The High Byte */
	voidWriteData(color >> 8);
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	b29b      	uxth	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fba2 	bl	80018a6 <voidWriteData>
	/* Write The LOW Byte */
	voidWriteData(color &0x00ff);
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fb9d 	bl	80018a6 <voidWriteData>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <TFT_vDrawHLine>:

void TFT_vDrawHLine(u8 x1, u16 y1, u8 lenght, u16 color)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	4604      	mov	r4, r0
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4623      	mov	r3, r4
 8002184:	71fb      	strb	r3, [r7, #7]
 8002186:	4603      	mov	r3, r0
 8002188:	80bb      	strh	r3, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	71bb      	strb	r3, [r7, #6]
 800218e:	4613      	mov	r3, r2
 8002190:	807b      	strh	r3, [r7, #2]
	u16 i = 0 ;
 8002192:	2300      	movs	r3, #0
 8002194:	81fb      	strh	r3, [r7, #14]
	for(;i<lenght ; i++)
 8002196:	e00c      	b.n	80021b2 <TFT_vDrawHLine+0x3e>
	{
		TFT_vDrawPixel(x1+i,y1,color);
 8002198:	89fb      	ldrh	r3, [r7, #14]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4413      	add	r3, r2
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	88b9      	ldrh	r1, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ffc2 	bl	8002130 <TFT_vDrawPixel>
	for(;i<lenght ; i++)
 80021ac:	89fb      	ldrh	r3, [r7, #14]
 80021ae:	3301      	adds	r3, #1
 80021b0:	81fb      	strh	r3, [r7, #14]
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	89fa      	ldrh	r2, [r7, #14]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d3ed      	bcc.n	8002198 <TFT_vDrawHLine+0x24>
	}
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}

080021c6 <TFT_vDrawVLine>:

void TFT_vDrawVLine(u8 x1, u16 y1, u16 lenght, u16 color){
 80021c6:	b590      	push	{r4, r7, lr}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4604      	mov	r4, r0
 80021ce:	4608      	mov	r0, r1
 80021d0:	4611      	mov	r1, r2
 80021d2:	461a      	mov	r2, r3
 80021d4:	4623      	mov	r3, r4
 80021d6:	71fb      	strb	r3, [r7, #7]
 80021d8:	4603      	mov	r3, r0
 80021da:	80bb      	strh	r3, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	803b      	strh	r3, [r7, #0]
	u16 i = 0 ;
 80021e4:	2300      	movs	r3, #0
 80021e6:	81fb      	strh	r3, [r7, #14]
	for(;i<lenght ; i++)
 80021e8:	e00b      	b.n	8002202 <TFT_vDrawVLine+0x3c>
	{
		TFT_vDrawPixel(x1,y1+i,color);
 80021ea:	88ba      	ldrh	r2, [r7, #4]
 80021ec:	89fb      	ldrh	r3, [r7, #14]
 80021ee:	4413      	add	r3, r2
 80021f0:	b299      	uxth	r1, r3
 80021f2:	883a      	ldrh	r2, [r7, #0]
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff ff9a 	bl	8002130 <TFT_vDrawPixel>
	for(;i<lenght ; i++)
 80021fc:	89fb      	ldrh	r3, [r7, #14]
 80021fe:	3301      	adds	r3, #1
 8002200:	81fb      	strh	r3, [r7, #14]
 8002202:	89fa      	ldrh	r2, [r7, #14]
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	429a      	cmp	r2, r3
 8002208:	d3ef      	bcc.n	80021ea <TFT_vDrawVLine+0x24>
	}
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}

08002214 <TFT_vDrawPicturesPixels>:

void TFT_vDrawPicturesPixels(u8 x1,u8 x2,u16 y1,u16 y2, u16*Copy_Image){
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	4604      	mov	r4, r0
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4623      	mov	r3, r4
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	4603      	mov	r3, r0
 8002228:	71bb      	strb	r3, [r7, #6]
 800222a:	460b      	mov	r3, r1
 800222c:	80bb      	strh	r3, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	807b      	strh	r3, [r7, #2]
	u32 Counter =0 ;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
	u16 x_max =( x2 - x1 );
 8002236:	79bb      	ldrb	r3, [r7, #6]
 8002238:	b29a      	uxth	r2, r3
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	b29b      	uxth	r3, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	81fb      	strh	r3, [r7, #14]
	u16 y_max =( y2 - y1 );
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	88bb      	ldrh	r3, [r7, #4]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	81bb      	strh	r3, [r7, #12]
	u16 xi=0;
 800224a:	2300      	movs	r3, #0
 800224c:	827b      	strh	r3, [r7, #18]
	u16 yi=0;
 800224e:	2300      	movs	r3, #0
 8002250:	823b      	strh	r3, [r7, #16]
	for (yi = 0 ; yi < y_max ; yi++)
 8002252:	2300      	movs	r3, #0
 8002254:	823b      	strh	r3, [r7, #16]
 8002256:	e020      	b.n	800229a <TFT_vDrawPicturesPixels+0x86>
	{
		for (xi = 0 ; xi < x_max ; xi++)
 8002258:	2300      	movs	r3, #0
 800225a:	827b      	strh	r3, [r7, #18]
 800225c:	e016      	b.n	800228c <TFT_vDrawPicturesPixels+0x78>
		{
			TFT_vDrawPixel(x1+xi,y1+yi,Copy_Image[Counter]);
 800225e:	8a7b      	ldrh	r3, [r7, #18]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4413      	add	r3, r2
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	88ba      	ldrh	r2, [r7, #4]
 800226a:	8a3b      	ldrh	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	b299      	uxth	r1, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002276:	4413      	add	r3, r2
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f7ff ff58 	bl	8002130 <TFT_vDrawPixel>
			Counter++;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	3301      	adds	r3, #1
 8002284:	617b      	str	r3, [r7, #20]
		for (xi = 0 ; xi < x_max ; xi++)
 8002286:	8a7b      	ldrh	r3, [r7, #18]
 8002288:	3301      	adds	r3, #1
 800228a:	827b      	strh	r3, [r7, #18]
 800228c:	8a7a      	ldrh	r2, [r7, #18]
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	429a      	cmp	r2, r3
 8002292:	d3e4      	bcc.n	800225e <TFT_vDrawPicturesPixels+0x4a>
	for (yi = 0 ; yi < y_max ; yi++)
 8002294:	8a3b      	ldrh	r3, [r7, #16]
 8002296:	3301      	adds	r3, #1
 8002298:	823b      	strh	r3, [r7, #16]
 800229a:	8a3a      	ldrh	r2, [r7, #16]
 800229c:	89bb      	ldrh	r3, [r7, #12]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3da      	bcc.n	8002258 <TFT_vDrawPicturesPixels+0x44>
		}

	}

}
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	371c      	adds	r7, #28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}

080022ac <TFT_vDrawUpTriangle>:

void TFT_vDrawUpTriangle(u8 x1, u16 y1, u8 size ,u16 color){
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4604      	mov	r4, r0
 80022b4:	4608      	mov	r0, r1
 80022b6:	4611      	mov	r1, r2
 80022b8:	461a      	mov	r2, r3
 80022ba:	4623      	mov	r3, r4
 80022bc:	71fb      	strb	r3, [r7, #7]
 80022be:	4603      	mov	r3, r0
 80022c0:	80bb      	strh	r3, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	71bb      	strb	r3, [r7, #6]
 80022c6:	4613      	mov	r3, r2
 80022c8:	807b      	strh	r3, [r7, #2]
	u8 i = 0 ;
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]

	for(;i<size ; i++)
 80022ce:	e016      	b.n	80022fe <TFT_vDrawUpTriangle+0x52>
	{
		TFT_vDrawHLine(x1+i,y1-i,(2*size-(2*i)-1),color);
 80022d0:	79fa      	ldrb	r2, [r7, #7]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	4413      	add	r3, r2
 80022d6:	b2d8      	uxtb	r0, r3
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	88ba      	ldrh	r2, [r7, #4]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	b299      	uxth	r1, r3
 80022e2:	79ba      	ldrb	r2, [r7, #6]
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	f7ff ff3e 	bl	8002174 <TFT_vDrawHLine>
	for(;i<size ; i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	429a      	cmp	r2, r3
 8002304:	d3e4      	bcc.n	80022d0 <TFT_vDrawUpTriangle+0x24>
	}

}
 8002306:	bf00      	nop
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}

08002310 <TFT_vDrawDownTriangle>:

void TFT_vDrawDownTriangle(u8 x1, u16 y1, u8 size ,u16 color){
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	4604      	mov	r4, r0
 8002318:	4608      	mov	r0, r1
 800231a:	4611      	mov	r1, r2
 800231c:	461a      	mov	r2, r3
 800231e:	4623      	mov	r3, r4
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	4603      	mov	r3, r0
 8002324:	80bb      	strh	r3, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	71bb      	strb	r3, [r7, #6]
 800232a:	4613      	mov	r3, r2
 800232c:	807b      	strh	r3, [r7, #2]
	u8 i = 0 ;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]

	for(;i<size ; i++)
 8002332:	e016      	b.n	8002362 <TFT_vDrawDownTriangle+0x52>
	{
		TFT_vDrawHLine(x1+i,y1+i,(2*size-(2*i)-1),color);
 8002334:	79fa      	ldrb	r2, [r7, #7]
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	4413      	add	r3, r2
 800233a:	b2d8      	uxtb	r0, r3
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	b29a      	uxth	r2, r3
 8002340:	88bb      	ldrh	r3, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	b299      	uxth	r1, r3
 8002346:	79ba      	ldrb	r2, [r7, #6]
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b2da      	uxtb	r2, r3
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	f7ff ff0c 	bl	8002174 <TFT_vDrawHLine>
	for(;i<size ; i++)
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	3301      	adds	r3, #1
 8002360:	73fb      	strb	r3, [r7, #15]
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	79bb      	ldrb	r3, [r7, #6]
 8002366:	429a      	cmp	r2, r3
 8002368:	d3e4      	bcc.n	8002334 <TFT_vDrawDownTriangle+0x24>
	}
}
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bd90      	pop	{r4, r7, pc}

08002374 <TFT_vDrawStar>:
	TFT_vDrawHLine(x1,y2,(x2-x1),color);
	TFT_vDrawVLine(x2,y1,(y2-y1),color);
}

void TFT_vDrawStar(u8 x1, u16 y1, u8 size, u16 color)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	4604      	mov	r4, r0
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4623      	mov	r3, r4
 8002384:	71fb      	strb	r3, [r7, #7]
 8002386:	4603      	mov	r3, r0
 8002388:	80bb      	strh	r3, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	71bb      	strb	r3, [r7, #6]
 800238e:	4613      	mov	r3, r2
 8002390:	807b      	strh	r3, [r7, #2]
	int i = 0 ;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
	TFT_vDrawHLine(x1,y1,size,color);
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	79ba      	ldrb	r2, [r7, #6]
 800239a:	88b9      	ldrh	r1, [r7, #4]
 800239c:	79f8      	ldrb	r0, [r7, #7]
 800239e:	f7ff fee9 	bl	8002174 <TFT_vDrawHLine>
	TFT_vDrawVLine(x1+(u8)(size/2),y1-(u8)(size/2),size,color);
 80023a2:	79bb      	ldrb	r3, [r7, #6]
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	4413      	add	r3, r2
 80023ac:	b2d8      	uxtb	r0, r3
 80023ae:	79bb      	ldrb	r3, [r7, #6]
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	88ba      	ldrh	r2, [r7, #4]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	b299      	uxth	r1, r3
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	f7ff ff00 	bl	80021c6 <TFT_vDrawVLine>
	for(i=0 ; i<size-2; i++){
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e031      	b.n	8002430 <TFT_vDrawStar+0xbc>
		if(i==(size/2)-2	|| i == (size/2) || i == (size/2)-1){continue;}
 80023cc:	79bb      	ldrb	r3, [r7, #6]
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	3b02      	subs	r3, #2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d026      	beq.n	8002428 <TFT_vDrawStar+0xb4>
 80023da:	79bb      	ldrb	r3, [r7, #6]
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d01f      	beq.n	8002428 <TFT_vDrawStar+0xb4>
 80023e8:	79bb      	ldrb	r3, [r7, #6]
 80023ea:	085b      	lsrs	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d018      	beq.n	8002428 <TFT_vDrawStar+0xb4>
		TFT_vDrawPixel(x1+i+1, y1-(size/2 )+1+i, color);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	4413      	add	r3, r2
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3301      	adds	r3, #1
 8002402:	b2d8      	uxtb	r0, r3
 8002404:	79bb      	ldrb	r3, [r7, #6]
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	b29b      	uxth	r3, r3
 800240c:	88ba      	ldrh	r2, [r7, #4]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	b29b      	uxth	r3, r3
 8002416:	4413      	add	r3, r2
 8002418:	b29b      	uxth	r3, r3
 800241a:	3301      	adds	r3, #1
 800241c:	b29b      	uxth	r3, r3
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	4619      	mov	r1, r3
 8002422:	f7ff fe85 	bl	8002130 <TFT_vDrawPixel>
 8002426:	e000      	b.n	800242a <TFT_vDrawStar+0xb6>
		if(i==(size/2)-2	|| i == (size/2) || i == (size/2)-1){continue;}
 8002428:	bf00      	nop
	for(i=0 ; i<size-2; i++){
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3301      	adds	r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	3b02      	subs	r3, #2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	429a      	cmp	r2, r3
 8002438:	dbc8      	blt.n	80023cc <TFT_vDrawStar+0x58>
	}
	for(i=0 ; i<size-2; i++){
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e031      	b.n	80024a4 <TFT_vDrawStar+0x130>
		if(i==(size/2)-2	|| i == (size/2) || i == (size/2)-1){continue;}
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	3b02      	subs	r3, #2
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	429a      	cmp	r2, r3
 800244c:	d026      	beq.n	800249c <TFT_vDrawStar+0x128>
 800244e:	79bb      	ldrb	r3, [r7, #6]
 8002450:	085b      	lsrs	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4293      	cmp	r3, r2
 800245a:	d01f      	beq.n	800249c <TFT_vDrawStar+0x128>
 800245c:	79bb      	ldrb	r3, [r7, #6]
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3b01      	subs	r3, #1
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	429a      	cmp	r2, r3
 8002468:	d018      	beq.n	800249c <TFT_vDrawStar+0x128>
		TFT_vDrawPixel(x1+i+1, y1+(size/2) -1-i, color);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	4413      	add	r3, r2
 8002472:	b2db      	uxtb	r3, r3
 8002474:	3301      	adds	r3, #1
 8002476:	b2d8      	uxtb	r0, r3
 8002478:	79bb      	ldrb	r3, [r7, #6]
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	b29a      	uxth	r2, r3
 8002480:	88bb      	ldrh	r3, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	b29b      	uxth	r3, r3
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29b      	uxth	r3, r3
 8002492:	887a      	ldrh	r2, [r7, #2]
 8002494:	4619      	mov	r1, r3
 8002496:	f7ff fe4b 	bl	8002130 <TFT_vDrawPixel>
 800249a:	e000      	b.n	800249e <TFT_vDrawStar+0x12a>
		if(i==(size/2)-2	|| i == (size/2) || i == (size/2)-1){continue;}
 800249c:	bf00      	nop
	for(i=0 ; i<size-2; i++){
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	3301      	adds	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	79bb      	ldrb	r3, [r7, #6]
 80024a6:	3b02      	subs	r3, #2
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dbc8      	blt.n	8002440 <TFT_vDrawStar+0xcc>
	}
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd90      	pop	{r4, r7, pc}

080024b8 <UART6_vInit>:
/*===========  INCLUDEAPP   ===========*/

/*=====================================*/
static volatile u8 * UART6_pAppParamter=NULL;
void UART6_vInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
	UART6->CR1=0;
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <UART6_vInit+0x48>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]

	/*Enable UART*/
	UART6->CR1 |= USART_CR1_UE;
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <UART6_vInit+0x48>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4a0e      	ldr	r2, [pc, #56]	; (8002500 <UART6_vInit+0x48>)
 80024c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024cc:	60d3      	str	r3, [r2, #12]
	/*Baud Rate*/
		/*baurdrate = 16MHz /(9600*16)
		 * mantissa =104
		 * fraction =16*.1666667= 2.66667=3*/
		UART6->BRR = 0;
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <UART6_vInit+0x48>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
		UART6->BRR = (3<<0)| (104<<4);
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <UART6_vInit+0x48>)
 80024d6:	f240 6283 	movw	r2, #1667	; 0x683
 80024da:	609a      	str	r2, [r3, #8]
		/*Enable Tx*/
		UART6->CR1|=USART_CR1_TE;
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <UART6_vInit+0x48>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <UART6_vInit+0x48>)
 80024e2:	f043 0308 	orr.w	r3, r3, #8
 80024e6:	60d3      	str	r3, [r2, #12]
					/*Enable Rx*/	/*Enable Interrupt*/
		UART6->CR1|=(USART_CR1_RE|USART_CR1_RXNEIE);
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <UART6_vInit+0x48>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <UART6_vInit+0x48>)
 80024ee:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80024f2:	60d3      	str	r3, [r2, #12]

	/*Mode*/
	/*Check Mode and apply Configuration*/
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40011400 	.word	0x40011400

08002504 <UART6_Callback>:
void UART6_Callback(u8 * pAppParamter)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	UART6_pAppParamter = pAppParamter;
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <UART6_Callback+0x1c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20001440 	.word	0x20001440

08002524 <USART6_IRQHandler>:
		L_u16ReceiveData = UART6->DR;
		/*return data*/
		return L_u16ReceiveData;
}
void USART6_IRQHandler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
	//u16 read5ra=UART6->DR;
	//LCD_enuWriteData(('a'));

	/*return data*/
	*UART6_pAppParamter = UART6->DR;
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <USART6_IRQHandler+0x28>)
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <USART6_IRQHandler+0x2c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
	//LCD_enuWriteData(('b'));
	UART6->DR=(*UART6_pAppParamter);
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <USART6_IRQHandler+0x2c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <USART6_IRQHandler+0x28>)
 800253e:	605a      	str	r2, [r3, #4]
	/*CLEAR FLAGS*/
	//UART6->SR = 0;
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40011400 	.word	0x40011400
 8002550:	20001440 	.word	0x20001440

08002554 <main>:
u8 key = NOT_PRESSED;


/**************************** Main Function ************************/
int main(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
/******************* MCAL Initialization ********************/
	/* RCC initialization */
	RCC_vInitSystemCLK();
 800255a:	f7fe ff15 	bl	8001388 <RCC_vInitSystemCLK>
	RCC_vEnableClock(AHB1_BUS,PERIPHERAL_EN_GPIOA );
 800255e:	2100      	movs	r1, #0
 8002560:	2000      	movs	r0, #0
 8002562:	f7fe ff35 	bl	80013d0 <RCC_vEnableClock>
	RCC_vEnableClock(AHB1_BUS,PERIPHERAL_EN_GPIOD );
 8002566:	2103      	movs	r1, #3
 8002568:	2000      	movs	r0, #0
 800256a:	f7fe ff31 	bl	80013d0 <RCC_vEnableClock>
	RCC_vEnableClock(AHB1_BUS,PERIPHERAL_EN_GPIOB );					//enable GPIOB and SPI (tft)
 800256e:	2101      	movs	r1, #1
 8002570:	2000      	movs	r0, #0
 8002572:	f7fe ff2d 	bl	80013d0 <RCC_vEnableClock>
	RCC_vEnableClock(APB1_BUS, PERIPHERAL_EN_SPI2);						//Enable SPI peripheral
 8002576:	210e      	movs	r1, #14
 8002578:	2002      	movs	r0, #2
 800257a:	f7fe ff29 	bl	80013d0 <RCC_vEnableClock>
	/* Systic initialization */
	STK_Init(STK_CLK_SRC_HCLK);
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe ffd6 	bl	8001530 <STK_Init>

	/* SPi initialization */
	MSPI_VidInit();						//SPI INIT
 8002584:	f7fe ff78 	bl	8001478 <MSPI_VidInit>

/******************* HAL Initialization ********************/
	/* LCD display initialization */
	LCD_enuInit();
 8002588:	f7fe fd0c 	bl	8000fa4 <LCD_enuInit>
	LCD_enuWriteCommand(0x0C); //Disable cursor
 800258c:	200c      	movs	r0, #12
 800258e:	f7fe fd71 	bl	8001074 <LCD_enuWriteCommand>

	/*TFT display init*/
	TFT_voidInit();
 8002592:	f7ff f91b 	bl	80017cc <TFT_voidInit>

	/* Keypad initialization */
	KEYPAD_enuInit();
 8002596:	f7fe fbff 	bl	8000d98 <KEYPAD_enuInit>

	/* Door initialization */
	Door_Init();
 800259a:	f7fd ff01 	bl	80003a0 <Door_Init>

	/* Air conditioner initialization */
	AC_AdjustTemperature(wanted_Temp);
 800259e:	4b2f      	ldr	r3, [pc, #188]	; (800265c <main+0x108>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd fe4c 	bl	8000240 <AC_AdjustTemperature>
	AC_Init();
 80025a8:	f7fd fe14 	bl	80001d4 <AC_Init>
	GPIO_vSetMode(GPIO_A, Pin9, GPIO_Output);
 80025ac:	2201      	movs	r2, #1
 80025ae:	2109      	movs	r1, #9
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fd ff6f 	bl	8000494 <GPIO_vSetMode>
	GPIO_vWritePinValue(GPIO_A, Pin9, LowState);  //initial state
 80025b6:	2200      	movs	r2, #0
 80025b8:	2109      	movs	r1, #9
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe f9e2 	bl	8000984 <GPIO_vWritePinValue>

	/* Bluetooth initialization */
	HC05_SetInputReading(&key);
 80025c0:	4827      	ldr	r0, [pc, #156]	; (8002660 <main+0x10c>)
 80025c2:	f7fe fbd9 	bl	8000d78 <HC05_SetInputReading>
	HC05_Init();						//HC05
 80025c6:	f7fe fbaf 	bl	8000d28 <HC05_Init>

	/* Leds initialization */
	//LED1
	GPIO_vSetMode(GPIO_A, Pin5, GPIO_Output);
 80025ca:	2201      	movs	r2, #1
 80025cc:	2105      	movs	r1, #5
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fd ff60 	bl	8000494 <GPIO_vSetMode>
	GPIO_vWritePinValue(GPIO_A, Pin5, LowState);  //initial state
 80025d4:	2200      	movs	r2, #0
 80025d6:	2105      	movs	r1, #5
 80025d8:	2000      	movs	r0, #0
 80025da:	f7fe f9d3 	bl	8000984 <GPIO_vWritePinValue>
	//LED2
	GPIO_vSetMode(GPIO_A, Pin6, GPIO_Output);
 80025de:	2201      	movs	r2, #1
 80025e0:	2106      	movs	r1, #6
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fd ff56 	bl	8000494 <GPIO_vSetMode>
	GPIO_vWritePinValue(GPIO_A, Pin6, LowState);  //initial state
 80025e8:	2200      	movs	r2, #0
 80025ea:	2106      	movs	r1, #6
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe f9c9 	bl	8000984 <GPIO_vWritePinValue>
	//LED3
	GPIO_vSetMode(GPIO_A, Pin7, GPIO_Output);
 80025f2:	2201      	movs	r2, #1
 80025f4:	2107      	movs	r1, #7
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fd ff4c 	bl	8000494 <GPIO_vSetMode>
	GPIO_vWritePinValue(GPIO_A, Pin7, LowState);  //initial state
 80025fc:	2200      	movs	r2, #0
 80025fe:	2107      	movs	r1, #7
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe f9bf 	bl	8000984 <GPIO_vWritePinValue>
	//LED4
	GPIO_vSetMode(GPIO_A, Pin8, GPIO_Output);
 8002606:	2201      	movs	r2, #1
 8002608:	2108      	movs	r1, #8
 800260a:	2000      	movs	r0, #0
 800260c:	f7fd ff42 	bl	8000494 <GPIO_vSetMode>
	GPIO_vWritePinValue(GPIO_A, Pin8, LowState);  //initial state
 8002610:	2200      	movs	r2, #0
 8002612:	2108      	movs	r1, #8
 8002614:	2000      	movs	r0, #0
 8002616:	f7fe f9b5 	bl	8000984 <GPIO_vWritePinValue>

	/* Alert initialization */
	//Buzzer
	GPIO_vSetMode(GPIO_A, Pin4, GPIO_Output);
 800261a:	2201      	movs	r2, #1
 800261c:	2104      	movs	r1, #4
 800261e:	2000      	movs	r0, #0
 8002620:	f7fd ff38 	bl	8000494 <GPIO_vSetMode>
	GPIO_vWritePinValue(GPIO_A, Pin4, LowState);  //initial state
 8002624:	2200      	movs	r2, #0
 8002626:	2104      	movs	r1, #4
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe f9ab 	bl	8000984 <GPIO_vWritePinValue>

/******************************************************************************/
/***************** main Variables ***********************/
	//password saving
	s8 RightPassword[MAX_PASS_NUM]= "010";
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <main+0x110>)
 8002630:	607b      	str	r3, [r7, #4]
	s8 MasterPassword[MAX_PASS_NUM]="010" ;
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <main+0x110>)
 8002634:	603b      	str	r3, [r7, #0]

/* initial display */
	LCD_enuWriteCommand(1);
 8002636:	2001      	movs	r0, #1
 8002638:	f7fe fd1c 	bl	8001074 <LCD_enuWriteCommand>
	LCD_enuWriteString((u8*)"Enter Password:");
 800263c:	480a      	ldr	r0, [pc, #40]	; (8002668 <main+0x114>)
 800263e:	f7fe fd51 	bl	80010e4 <LCD_enuWriteString>
	LCD_enuGoToPosition(2,1);
 8002642:	2101      	movs	r1, #1
 8002644:	2002      	movs	r0, #2
 8002646:	f7fe fdcf 	bl	80011e8 <LCD_enuGoToPosition>
	TFT_vPasswordPanel();
 800264a:	f7ff fd13 	bl	8002074 <TFT_vPasswordPanel>

	while(1)
	{
		PasswordTap(RightPassword, MasterPassword );
 800264e:	463a      	mov	r2, r7
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f809 	bl	800266c <PasswordTap>
 800265a:	e7f8      	b.n	800264e <main+0xfa>
 800265c:	20001360 	.word	0x20001360
 8002660:	20001361 	.word	0x20001361
 8002664:	00303130 	.word	0x00303130
 8002668:	08002c18 	.word	0x08002c18

0800266c <PasswordTap>:
/***************************End of main function *******************************/


/**************************** PasswordTap Function ************************/
void PasswordTap(s8* RightPassword,s8* MasterPassword )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]

	s8 static Loc_s8StrItrr=0 ; 								/*String Iterator for Each Password index */
	s8 static EnteredPassword[MAX_PASS_NUM]={0} ;				/*User Entered Password */
	u8 static wrongInputRemain = WRONG_INPUTS_ALLOWED;  		//number of wrong inputs //save it in EEPROM
	key = NOT_PRESSED;											/*Storing Input value*/
 8002676:	4b40      	ldr	r3, [pc, #256]	; (8002778 <PasswordTap+0x10c>)
 8002678:	2221      	movs	r2, #33	; 0x21
 800267a:	701a      	strb	r2, [r3, #0]

	STK_DelayMs(1);												/*for protues Simulation */
 800267c:	2001      	movs	r0, #1
 800267e:	f7fe ffa1 	bl	80015c4 <STK_DelayMs>
	Keypad_GetPressedKey(&key);									/*store keypad input*/
 8002682:	483d      	ldr	r0, [pc, #244]	; (8002778 <PasswordTap+0x10c>)
 8002684:	f7fe fbdc 	bl	8000e40 <Keypad_GetPressedKey>

	if (key != NOT_PRESSED)
 8002688:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <PasswordTap+0x10c>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b21      	cmp	r3, #33	; 0x21
 800268e:	d06e      	beq.n	800276e <PasswordTap+0x102>
	{
		if(key >= '0' && key <='9')
 8002690:	4b39      	ldr	r3, [pc, #228]	; (8002778 <PasswordTap+0x10c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b2f      	cmp	r3, #47	; 0x2f
 8002696:	d924      	bls.n	80026e2 <PasswordTap+0x76>
 8002698:	4b37      	ldr	r3, [pc, #220]	; (8002778 <PasswordTap+0x10c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b39      	cmp	r3, #57	; 0x39
 800269e:	d820      	bhi.n	80026e2 <PasswordTap+0x76>
		{
			BeebSound();
 80026a0:	f000 fa3b 	bl	8002b1a <BeebSound>
			LCD_enuWriteData('*');
 80026a4:	202a      	movs	r0, #42	; 0x2a
 80026a6:	f7fe fd01 	bl	80010ac <LCD_enuWriteData>
			TFT_vDrawPassword(Loc_s8StrItrr +1);
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <PasswordTap+0x110>)
 80026ac:	f993 3000 	ldrsb.w	r3, [r3]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3301      	adds	r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fcb6 	bl	8002028 <TFT_vDrawPassword>
			EnteredPassword[Loc_s8StrItrr] = key;
 80026bc:	4b2e      	ldr	r3, [pc, #184]	; (8002778 <PasswordTap+0x10c>)
 80026be:	7819      	ldrb	r1, [r3, #0]
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <PasswordTap+0x110>)
 80026c2:	f993 3000 	ldrsb.w	r3, [r3]
 80026c6:	461a      	mov	r2, r3
 80026c8:	b249      	sxtb	r1, r1
 80026ca:	4b2d      	ldr	r3, [pc, #180]	; (8002780 <PasswordTap+0x114>)
 80026cc:	5499      	strb	r1, [r3, r2]
			Loc_s8StrItrr++;
 80026ce:	4b2b      	ldr	r3, [pc, #172]	; (800277c <PasswordTap+0x110>)
 80026d0:	f993 3000 	ldrsb.w	r3, [r3]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	b25a      	sxtb	r2, r3
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <PasswordTap+0x110>)
 80026de:	701a      	strb	r2, [r3, #0]
			LCD_enuGoToPosition(2,1);
			TFT_vPasswordPanel();
		}
	}

}
 80026e0:	e045      	b.n	800276e <PasswordTap+0x102>
		else if('=' == key)
 80026e2:	4b25      	ldr	r3, [pc, #148]	; (8002778 <PasswordTap+0x10c>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b3d      	cmp	r3, #61	; 0x3d
 80026e8:	d141      	bne.n	800276e <PasswordTap+0x102>
			BeebSound();
 80026ea:	f000 fa16 	bl	8002b1a <BeebSound>
			if((strEqual(EnteredPassword , RightPassword ) == STR_EQL) ||
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4823      	ldr	r0, [pc, #140]	; (8002780 <PasswordTap+0x114>)
 80026f2:	f000 f9e9 	bl	8002ac8 <strEqual>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d006      	beq.n	800270a <PasswordTap+0x9e>
					(strEqual(EnteredPassword , MasterPassword )== STR_EQL))
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	4820      	ldr	r0, [pc, #128]	; (8002780 <PasswordTap+0x114>)
 8002700:	f000 f9e2 	bl	8002ac8 <strEqual>
 8002704:	4603      	mov	r3, r0
			if((strEqual(EnteredPassword , RightPassword ) == STR_EQL) ||
 8002706:	2b01      	cmp	r3, #1
 8002708:	d106      	bne.n	8002718 <PasswordTap+0xac>
				WelcomeTap(RightPassword);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f83e 	bl	800278c <WelcomeTap>
				wrongInputRemain = WRONG_INPUTS_ALLOWED;
 8002710:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <PasswordTap+0x118>)
 8002712:	2203      	movs	r2, #3
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	e002      	b.n	800271e <PasswordTap+0xb2>
				WrongTap(&wrongInputRemain);
 8002718:	481a      	ldr	r0, [pc, #104]	; (8002784 <PasswordTap+0x118>)
 800271a:	f000 f993 	bl	8002a44 <WrongTap>
			for(Loc_s8StrItrr = 0 ; Loc_s8StrItrr<MAX_PASS_NUM ; Loc_s8StrItrr++)
 800271e:	4b17      	ldr	r3, [pc, #92]	; (800277c <PasswordTap+0x110>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e00f      	b.n	8002746 <PasswordTap+0xda>
				EnteredPassword[Loc_s8StrItrr] = 0;
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <PasswordTap+0x110>)
 8002728:	f993 3000 	ldrsb.w	r3, [r3]
 800272c:	461a      	mov	r2, r3
 800272e:	4b14      	ldr	r3, [pc, #80]	; (8002780 <PasswordTap+0x114>)
 8002730:	2100      	movs	r1, #0
 8002732:	5499      	strb	r1, [r3, r2]
			for(Loc_s8StrItrr = 0 ; Loc_s8StrItrr<MAX_PASS_NUM ; Loc_s8StrItrr++)
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <PasswordTap+0x110>)
 8002736:	f993 3000 	ldrsb.w	r3, [r3]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	b25a      	sxtb	r2, r3
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <PasswordTap+0x110>)
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <PasswordTap+0x110>)
 8002748:	f993 3000 	ldrsb.w	r3, [r3]
 800274c:	2b03      	cmp	r3, #3
 800274e:	ddea      	ble.n	8002726 <PasswordTap+0xba>
			Loc_s8StrItrr =0; /*reset String Iterator to zero for next iteration */
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <PasswordTap+0x110>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
			LCD_enuWriteCommand(1);
 8002756:	2001      	movs	r0, #1
 8002758:	f7fe fc8c 	bl	8001074 <LCD_enuWriteCommand>
			LCD_enuWriteString("Enter Password:");
 800275c:	480a      	ldr	r0, [pc, #40]	; (8002788 <PasswordTap+0x11c>)
 800275e:	f7fe fcc1 	bl	80010e4 <LCD_enuWriteString>
			LCD_enuGoToPosition(2,1);
 8002762:	2101      	movs	r1, #1
 8002764:	2002      	movs	r0, #2
 8002766:	f7fe fd3f 	bl	80011e8 <LCD_enuGoToPosition>
			TFT_vPasswordPanel();
 800276a:	f7ff fc83 	bl	8002074 <TFT_vPasswordPanel>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20001361 	.word	0x20001361
 800277c:	20001444 	.word	0x20001444
 8002780:	20001448 	.word	0x20001448
 8002784:	20001362 	.word	0x20001362
 8002788:	08002c18 	.word	0x08002c18

0800278c <WelcomeTap>:
/***************************End of PasswordTap  function *******************************/


/**************************** WelcomeTap  Function ***********************************/
void WelcomeTap(s8* Copy_ps8RightPassword)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	u8 strItrr=0;									/*String Iterator for Each Password index */
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
	u8 static DimmerLedVal = 0;						/*Variable for Brightness Values*/
	u8 static PasswordIndex = 1;

	LCD_enuWriteCommand(1);				//clear screen
 8002798:	2001      	movs	r0, #1
 800279a:	f7fe fc6b 	bl	8001074 <LCD_enuWriteCommand>
	LCD_enuGoToPosition(1,5);
 800279e:	2105      	movs	r1, #5
 80027a0:	2001      	movs	r0, #1
 80027a2:	f7fe fd21 	bl	80011e8 <LCD_enuGoToPosition>
	LCD_enuWriteString("Welcome!!");    //print on TFT
 80027a6:	48a1      	ldr	r0, [pc, #644]	; (8002a2c <WelcomeTap+0x2a0>)
 80027a8:	f7fe fc9c 	bl	80010e4 <LCD_enuWriteString>
	TFT_vUserPanel();								/*open user panel */
 80027ac:	f7ff fc2a 	bl	8002004 <TFT_vUserPanel>

	while(1)
	{
		key = NOT_PRESSED;
 80027b0:	4b9f      	ldr	r3, [pc, #636]	; (8002a30 <WelcomeTap+0x2a4>)
 80027b2:	2221      	movs	r2, #33	; 0x21
 80027b4:	701a      	strb	r2, [r3, #0]
		TFT_vDrawTempValue(wanted_Temp);
 80027b6:	4b9f      	ldr	r3, [pc, #636]	; (8002a34 <WelcomeTap+0x2a8>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fb21 	bl	8001e04 <TFT_vDrawTempValue>
		Keypad_GetPressedKey(&key);
 80027c2:	489b      	ldr	r0, [pc, #620]	; (8002a30 <WelcomeTap+0x2a4>)
 80027c4:	f7fe fb3c 	bl	8000e40 <Keypad_GetPressedKey>
		if (key != NOT_PRESSED)
 80027c8:	4b99      	ldr	r3, [pc, #612]	; (8002a30 <WelcomeTap+0x2a4>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b21      	cmp	r3, #33	; 0x21
 80027ce:	d0ef      	beq.n	80027b0 <WelcomeTap+0x24>
		{
			if(LED_1_BUTTON==key || LED_2_BUTTON==key || LED_3_BUTTON==key || LED_4_BUTTON==key)
 80027d0:	4b97      	ldr	r3, [pc, #604]	; (8002a30 <WelcomeTap+0x2a4>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b37      	cmp	r3, #55	; 0x37
 80027d6:	d00b      	beq.n	80027f0 <WelcomeTap+0x64>
 80027d8:	4b95      	ldr	r3, [pc, #596]	; (8002a30 <WelcomeTap+0x2a4>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b38      	cmp	r3, #56	; 0x38
 80027de:	d007      	beq.n	80027f0 <WelcomeTap+0x64>
 80027e0:	4b93      	ldr	r3, [pc, #588]	; (8002a30 <WelcomeTap+0x2a4>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b39      	cmp	r3, #57	; 0x39
 80027e6:	d003      	beq.n	80027f0 <WelcomeTap+0x64>
 80027e8:	4b91      	ldr	r3, [pc, #580]	; (8002a30 <WelcomeTap+0x2a4>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b2f      	cmp	r3, #47	; 0x2f
 80027ee:	d13d      	bne.n	800286c <WelcomeTap+0xe0>
			{
				//LED control
				switch(key)
 80027f0:	4b8f      	ldr	r3, [pc, #572]	; (8002a30 <WelcomeTap+0x2a4>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	3b2f      	subs	r3, #47	; 0x2f
 80027f6:	2b0a      	cmp	r3, #10
 80027f8:	d83a      	bhi.n	8002870 <WelcomeTap+0xe4>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <WelcomeTap+0x74>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	0800285d 	.word	0x0800285d
 8002804:	08002871 	.word	0x08002871
 8002808:	08002871 	.word	0x08002871
 800280c:	08002871 	.word	0x08002871
 8002810:	08002871 	.word	0x08002871
 8002814:	08002871 	.word	0x08002871
 8002818:	08002871 	.word	0x08002871
 800281c:	08002871 	.word	0x08002871
 8002820:	0800282d 	.word	0x0800282d
 8002824:	0800283d 	.word	0x0800283d
 8002828:	0800284d 	.word	0x0800284d
				{
				case LED_1_BUTTON: GPIO_vTogglePinValue(GPIO_A, Pin5);
 800282c:	2105      	movs	r1, #5
 800282e:	2000      	movs	r0, #0
 8002830:	f7fe fa06 	bl	8000c40 <GPIO_vTogglePinValue>
				TFT_vToggle(1);
 8002834:	2001      	movs	r0, #1
 8002836:	f7ff f953 	bl	8001ae0 <TFT_vToggle>
				break;
 800283a:	e01a      	b.n	8002872 <WelcomeTap+0xe6>
				case LED_2_BUTTON: GPIO_vTogglePinValue(GPIO_A, Pin6);
 800283c:	2106      	movs	r1, #6
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f9fe 	bl	8000c40 <GPIO_vTogglePinValue>
				TFT_vToggle(2);
 8002844:	2002      	movs	r0, #2
 8002846:	f7ff f94b 	bl	8001ae0 <TFT_vToggle>
				break;
 800284a:	e012      	b.n	8002872 <WelcomeTap+0xe6>
				case LED_3_BUTTON: GPIO_vTogglePinValue(GPIO_A, Pin7);
 800284c:	2107      	movs	r1, #7
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe f9f6 	bl	8000c40 <GPIO_vTogglePinValue>
				TFT_vToggle(3);
 8002854:	2003      	movs	r0, #3
 8002856:	f7ff f943 	bl	8001ae0 <TFT_vToggle>
				break;
 800285a:	e00a      	b.n	8002872 <WelcomeTap+0xe6>
				case LED_4_BUTTON: GPIO_vTogglePinValue(GPIO_A, Pin8);
 800285c:	2108      	movs	r1, #8
 800285e:	2000      	movs	r0, #0
 8002860:	f7fe f9ee 	bl	8000c40 <GPIO_vTogglePinValue>
				TFT_vToggle(4);
 8002864:	2004      	movs	r0, #4
 8002866:	f7ff f93b 	bl	8001ae0 <TFT_vToggle>
				break;
 800286a:	e002      	b.n	8002872 <WelcomeTap+0xe6>
				default:/*MESRA*/
					break;
				}
			}
 800286c:	bf00      	nop
 800286e:	e000      	b.n	8002872 <WelcomeTap+0xe6>
					break;
 8002870:	bf00      	nop

			if(BRIGHTNESS_UP==key || BRIGHTNESS_DOWN==key)
 8002872:	4b6f      	ldr	r3, [pc, #444]	; (8002a30 <WelcomeTap+0x2a4>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b34      	cmp	r3, #52	; 0x34
 8002878:	d003      	beq.n	8002882 <WelcomeTap+0xf6>
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <WelcomeTap+0x2a4>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b35      	cmp	r3, #53	; 0x35
 8002880:	d124      	bne.n	80028cc <WelcomeTap+0x140>
			{
				//Brightness Dimmer control
				switch(key)
 8002882:	4b6b      	ldr	r3, [pc, #428]	; (8002a30 <WelcomeTap+0x2a4>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b34      	cmp	r3, #52	; 0x34
 8002888:	d002      	beq.n	8002890 <WelcomeTap+0x104>
 800288a:	2b35      	cmp	r3, #53	; 0x35
 800288c:	d00b      	beq.n	80028a6 <WelcomeTap+0x11a>
					{
						DimmerLedVal -=50;
					}
					break;
				default:/*MESRA*/
					break;
 800288e:	e018      	b.n	80028c2 <WelcomeTap+0x136>
					if(DimmerLedVal < 250)
 8002890:	4b69      	ldr	r3, [pc, #420]	; (8002a38 <WelcomeTap+0x2ac>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2bf9      	cmp	r3, #249	; 0xf9
 8002896:	d811      	bhi.n	80028bc <WelcomeTap+0x130>
						DimmerLedVal +=50;
 8002898:	4b67      	ldr	r3, [pc, #412]	; (8002a38 <WelcomeTap+0x2ac>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	3332      	adds	r3, #50	; 0x32
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <WelcomeTap+0x2ac>)
 80028a2:	701a      	strb	r2, [r3, #0]
					break;
 80028a4:	e00a      	b.n	80028bc <WelcomeTap+0x130>
					if(DimmerLedVal > 0)
 80028a6:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <WelcomeTap+0x2ac>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <WelcomeTap+0x134>
						DimmerLedVal -=50;
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <WelcomeTap+0x2ac>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	3b32      	subs	r3, #50	; 0x32
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <WelcomeTap+0x2ac>)
 80028b8:	701a      	strb	r2, [r3, #0]
					break;
 80028ba:	e001      	b.n	80028c0 <WelcomeTap+0x134>
					break;
 80028bc:	bf00      	nop
 80028be:	e000      	b.n	80028c2 <WelcomeTap+0x136>
					break;
 80028c0:	bf00      	nop
				}
				TFT_vControlDimmerLed(DimmerLedVal);
 80028c2:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <WelcomeTap+0x2ac>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fb22 	bl	8001f10 <TFT_vControlDimmerLed>
			}
			if(DOOR_OPEN ==key || DOOR_CLOSE==key)
 80028cc:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <WelcomeTap+0x2a4>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b31      	cmp	r3, #49	; 0x31
 80028d2:	d003      	beq.n	80028dc <WelcomeTap+0x150>
 80028d4:	4b56      	ldr	r3, [pc, #344]	; (8002a30 <WelcomeTap+0x2a4>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b32      	cmp	r3, #50	; 0x32
 80028da:	d112      	bne.n	8002902 <WelcomeTap+0x176>
			{
				//Door control
				switch(key)
 80028dc:	4b54      	ldr	r3, [pc, #336]	; (8002a30 <WelcomeTap+0x2a4>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b31      	cmp	r3, #49	; 0x31
 80028e2:	d002      	beq.n	80028ea <WelcomeTap+0x15e>
 80028e4:	2b32      	cmp	r3, #50	; 0x32
 80028e6:	d006      	beq.n	80028f6 <WelcomeTap+0x16a>
				case DOOR_CLOSE:  //Close
					Door_Control(EXIT);
					TFT_vDoorClosed();
					break;
				default:/*MESRA*/
					break;
 80028e8:	e00c      	b.n	8002904 <WelcomeTap+0x178>
					Door_Control(ENTER);
 80028ea:	2019      	movs	r0, #25
 80028ec:	f7fd fd62 	bl	80003b4 <Door_Control>
					TFT_vDoorOpened();
 80028f0:	f7ff f984 	bl	8001bfc <TFT_vDoorOpened>
					break;
 80028f4:	e006      	b.n	8002904 <WelcomeTap+0x178>
					Door_Control(EXIT);
 80028f6:	207d      	movs	r0, #125	; 0x7d
 80028f8:	f7fd fd5c 	bl	80003b4 <Door_Control>
					TFT_vDoorClosed();
 80028fc:	f7ff f98e 	bl	8001c1c <TFT_vDoorClosed>
					break;
 8002900:	e000      	b.n	8002904 <WelcomeTap+0x178>
				}
			}
 8002902:	bf00      	nop
			if(TEMP_UP==key || TEMP_DOWN==key)
 8002904:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <WelcomeTap+0x2a4>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b43      	cmp	r3, #67	; 0x43
 800290a:	d003      	beq.n	8002914 <WelcomeTap+0x188>
 800290c:	4b48      	ldr	r3, [pc, #288]	; (8002a30 <WelcomeTap+0x2a4>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b30      	cmp	r3, #48	; 0x30
 8002912:	d11f      	bne.n	8002954 <WelcomeTap+0x1c8>
			{
				//AC control
				switch(key)
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <WelcomeTap+0x2a4>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b30      	cmp	r3, #48	; 0x30
 800291a:	d008      	beq.n	800292e <WelcomeTap+0x1a2>
 800291c:	2b43      	cmp	r3, #67	; 0x43
 800291e:	d10d      	bne.n	800293c <WelcomeTap+0x1b0>
				{
				case TEMP_UP:  //tempUp
					//Display_temp(wanted_Temp);
					wanted_Temp++;
 8002920:	4b44      	ldr	r3, [pc, #272]	; (8002a34 <WelcomeTap+0x2a8>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	4b42      	ldr	r3, [pc, #264]	; (8002a34 <WelcomeTap+0x2a8>)
 800292a:	701a      	strb	r2, [r3, #0]
					break;
 800292c:	e007      	b.n	800293e <WelcomeTap+0x1b2>
				case TEMP_DOWN:  //tempDown
					wanted_Temp--;
 800292e:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <WelcomeTap+0x2a8>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	3b01      	subs	r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <WelcomeTap+0x2a8>)
 8002938:	701a      	strb	r2, [r3, #0]
					break;
 800293a:	e000      	b.n	800293e <WelcomeTap+0x1b2>
				default:/*MESRA*/
					break;
 800293c:	bf00      	nop
				}

				/*print Wanted Temperature after updating */
				AC_AdjustTemperature(wanted_Temp);
 800293e:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <WelcomeTap+0x2a8>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc7c 	bl	8000240 <AC_AdjustTemperature>
				TFT_vDrawTempValue(wanted_Temp);
 8002948:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <WelcomeTap+0x2a8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	b29b      	uxth	r3, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fa58 	bl	8001e04 <TFT_vDrawTempValue>

			}
			if(SYS_LOCK==key) //Lock the locker key
 8002954:	4b36      	ldr	r3, [pc, #216]	; (8002a30 <WelcomeTap+0x2a4>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b3d      	cmp	r3, #61	; 0x3d
 800295a:	d102      	bne.n	8002962 <WelcomeTap+0x1d6>
			{
				BeebSound();
 800295c:	f000 f8dd 	bl	8002b1a <BeebSound>
				break;//back to main()
 8002960:	e05f      	b.n	8002a22 <WelcomeTap+0x296>
			}
			if(PASS_CHANGE==key) //change password key
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <WelcomeTap+0x2a4>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b2b      	cmp	r3, #43	; 0x2b
 8002968:	f47f af22 	bne.w	80027b0 <WelcomeTap+0x24>
			{
				BeebSound();
 800296c:	f000 f8d5 	bl	8002b1a <BeebSound>
				//reset all RightPassword to zero
				for(strItrr = 0 ; strItrr<MAX_PASS_NUM ; strItrr++)
 8002970:	2300      	movs	r3, #0
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e007      	b.n	8002986 <WelcomeTap+0x1fa>
				{
					Copy_ps8RightPassword[strItrr] = 0;
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
				for(strItrr = 0 ; strItrr<MAX_PASS_NUM ; strItrr++)
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	3301      	adds	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b03      	cmp	r3, #3
 800298a:	d9f4      	bls.n	8002976 <WelcomeTap+0x1ea>
				}
				strItrr = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
				/*************************/
				LCD_enuWriteCommand(1);
 8002990:	2001      	movs	r0, #1
 8002992:	f7fe fb6f 	bl	8001074 <LCD_enuWriteCommand>
				LCD_enuGoToPosition(1,1);
 8002996:	2101      	movs	r1, #1
 8002998:	2001      	movs	r0, #1
 800299a:	f7fe fc25 	bl	80011e8 <LCD_enuGoToPosition>
				LCD_enuWriteString("New Password is:");
 800299e:	4827      	ldr	r0, [pc, #156]	; (8002a3c <WelcomeTap+0x2b0>)
 80029a0:	f7fe fba0 	bl	80010e4 <LCD_enuWriteString>
				LCD_enuGoToPosition(2,1);
 80029a4:	2101      	movs	r1, #1
 80029a6:	2002      	movs	r0, #2
 80029a8:	f7fe fc1e 	bl	80011e8 <LCD_enuGoToPosition>
				TFT_vChangePasswordPanel();     //New password Tap
 80029ac:	f7ff fb90 	bl	80020d0 <TFT_vChangePasswordPanel>
				while(1)
				{
					key = NOT_PRESSED;
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <WelcomeTap+0x2a4>)
 80029b2:	2221      	movs	r2, #33	; 0x21
 80029b4:	701a      	strb	r2, [r3, #0]
					Keypad_GetPressedKey(&key);
 80029b6:	481e      	ldr	r0, [pc, #120]	; (8002a30 <WelcomeTap+0x2a4>)
 80029b8:	f7fe fa42 	bl	8000e40 <Keypad_GetPressedKey>
					if (key != NOT_PRESSED)
 80029bc:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <WelcomeTap+0x2a4>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b21      	cmp	r3, #33	; 0x21
 80029c2:	d0f5      	beq.n	80029b0 <WelcomeTap+0x224>
					{
						if(key >= '0' && key <='9')
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <WelcomeTap+0x2a4>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b2f      	cmp	r3, #47	; 0x2f
 80029ca:	d91e      	bls.n	8002a0a <WelcomeTap+0x27e>
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <WelcomeTap+0x2a4>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b39      	cmp	r3, #57	; 0x39
 80029d2:	d81a      	bhi.n	8002a0a <WelcomeTap+0x27e>
						{
							BeebSound();
 80029d4:	f000 f8a1 	bl	8002b1a <BeebSound>
							LCD_enuWriteData('*');
 80029d8:	202a      	movs	r0, #42	; 0x2a
 80029da:	f7fe fb67 	bl	80010ac <LCD_enuWriteData>
							TFT_vDrawPassword(PasswordIndex);
 80029de:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <WelcomeTap+0x2b4>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fb20 	bl	8002028 <TFT_vDrawPassword>
							Copy_ps8RightPassword[strItrr] = key;
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <WelcomeTap+0x2a4>)
 80029ea:	7819      	ldrb	r1, [r3, #0]
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	b24a      	sxtb	r2, r1
 80029f4:	701a      	strb	r2, [r3, #0]
							strItrr++;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	3301      	adds	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
							PasswordIndex++;
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <WelcomeTap+0x2b4>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <WelcomeTap+0x2b4>)
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e00a      	b.n	8002a20 <WelcomeTap+0x294>
						}
						else if('=' == key)
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <WelcomeTap+0x2a4>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b3d      	cmp	r3, #61	; 0x3d
 8002a10:	d1ce      	bne.n	80029b0 <WelcomeTap+0x224>
						{
							BeebSound();
 8002a12:	f000 f882 	bl	8002b1a <BeebSound>
							PasswordIndex = 1;
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <WelcomeTap+0x2b4>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
							break;
 8002a1c:	bf00      	nop
						}
					}
				}
				break; //back to main()
 8002a1e:	e000      	b.n	8002a22 <WelcomeTap+0x296>
					key = NOT_PRESSED;
 8002a20:	e7c6      	b.n	80029b0 <WelcomeTap+0x224>
			}
		}
	}
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	08002c28 	.word	0x08002c28
 8002a30:	20001361 	.word	0x20001361
 8002a34:	20001360 	.word	0x20001360
 8002a38:	2000144c 	.word	0x2000144c
 8002a3c:	08002c34 	.word	0x08002c34
 8002a40:	20001363 	.word	0x20001363

08002a44 <WrongTap>:

void WrongTap(u8* Copy_ps8wrongInputRemain)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	if(*Copy_ps8wrongInputRemain  > 1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d925      	bls.n	8002aa0 <WrongTap+0x5c>
	{
		*Copy_ps8wrongInputRemain -=1;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	701a      	strb	r2, [r3, #0]
		LCD_enuWriteCommand(1);
 8002a60:	2001      	movs	r0, #1
 8002a62:	f7fe fb07 	bl	8001074 <LCD_enuWriteCommand>
		LCD_enuGoToPosition(1,5);
 8002a66:	2105      	movs	r1, #5
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f7fe fbbd 	bl	80011e8 <LCD_enuGoToPosition>
		LCD_enuWriteString("Wrong!!");
 8002a6e:	4813      	ldr	r0, [pc, #76]	; (8002abc <WrongTap+0x78>)
 8002a70:	f7fe fb38 	bl	80010e4 <LCD_enuWriteString>
		LCD_enuGoToPosition(2,1);
 8002a74:	2101      	movs	r1, #1
 8002a76:	2002      	movs	r0, #2
 8002a78:	f7fe fbb6 	bl	80011e8 <LCD_enuGoToPosition>
		LCD_enuWriteIntegerNum(*Copy_ps8wrongInputRemain);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe fb4d 	bl	8001120 <LCD_enuWriteIntegerNum>
		LCD_enuWriteString(" trial left!!");
 8002a86:	480e      	ldr	r0, [pc, #56]	; (8002ac0 <WrongTap+0x7c>)
 8002a88:	f7fe fb2c 	bl	80010e4 <LCD_enuWriteString>
		TFT_vTrialLeft(*Copy_ps8wrongInputRemain);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fb03 	bl	800209c <TFT_vTrialLeft>
		STK_DelayMs(500);
 8002a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a9a:	f7fe fd93 	bl	80015c4 <STK_DelayMs>
		LCD_enuWriteCommand(1);
		LCD_enuWriteString("Calling Police...");
		TFT_vPolicePanel();
		Buzzer_TOG();
	}
}
 8002a9e:	e009      	b.n	8002ab4 <WrongTap+0x70>
		LCD_enuWriteCommand(1);
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f7fe fae7 	bl	8001074 <LCD_enuWriteCommand>
		LCD_enuWriteString("Calling Police...");
 8002aa6:	4807      	ldr	r0, [pc, #28]	; (8002ac4 <WrongTap+0x80>)
 8002aa8:	f7fe fb1c 	bl	80010e4 <LCD_enuWriteString>
		TFT_vPolicePanel();
 8002aac:	f7ff fb2e 	bl	800210c <TFT_vPolicePanel>
		Buzzer_TOG();
 8002ab0:	f000 f844 	bl	8002b3c <Buzzer_TOG>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	08002c48 	.word	0x08002c48
 8002ac0:	08002c50 	.word	0x08002c50
 8002ac4:	08002c60 	.word	0x08002c60

08002ac8 <strEqual>:

u8 strEqual(s8* Copy_ps8str1 , s8 * Copy_ps8str2)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	while(*Copy_ps8str1 != 0 || *Copy_ps8str2 != 0)
 8002ad2:	e013      	b.n	8002afc <strEqual+0x34>
	{
		STK_DelayMs(5);
 8002ad4:	2005      	movs	r0, #5
 8002ad6:	f7fe fd75 	bl	80015c4 <STK_DelayMs>
		if(*Copy_ps8str1 == *Copy_ps8str2){
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f993 2000 	ldrsb.w	r2, [r3]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f993 3000 	ldrsb.w	r3, [r3]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d106      	bne.n	8002af8 <strEqual+0x30>
			Copy_ps8str1++;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3301      	adds	r3, #1
 8002aee:	607b      	str	r3, [r7, #4]
			Copy_ps8str2++;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3301      	adds	r3, #1
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	e001      	b.n	8002afc <strEqual+0x34>
		}
		else{
			return STR_NEQL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e00a      	b.n	8002b12 <strEqual+0x4a>
	while(*Copy_ps8str1 != 0 || *Copy_ps8str2 != 0)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f993 3000 	ldrsb.w	r3, [r3]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e6      	bne.n	8002ad4 <strEqual+0xc>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f993 3000 	ldrsb.w	r3, [r3]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e1      	bne.n	8002ad4 <strEqual+0xc>
		}
	}
	return STR_EQL;
 8002b10:	2301      	movs	r3, #1
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <BeebSound>:

void BeebSound(void)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	af00      	add	r7, sp, #0
	GPIO_vWritePinValue(GPIO_A, Pin4, HighState);
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2104      	movs	r1, #4
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7fd ff2e 	bl	8000984 <GPIO_vWritePinValue>
	STK_DelayMs(100);
 8002b28:	2064      	movs	r0, #100	; 0x64
 8002b2a:	f7fe fd4b 	bl	80015c4 <STK_DelayMs>
	GPIO_vWritePinValue(GPIO_A, Pin4, LowState);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2104      	movs	r1, #4
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fd ff26 	bl	8000984 <GPIO_vWritePinValue>
}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <Buzzer_TOG>:
void Buzzer_TOG( void )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	//BUZZER Waiting B0
	while(1)
	{
		GPIO_vTogglePinValue(GPIO_A, Pin4);
 8002b40:	2104      	movs	r1, #4
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe f87c 	bl	8000c40 <GPIO_vTogglePinValue>
		STK_DelayMs(500);
 8002b48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b4c:	f7fe fd3a 	bl	80015c4 <STK_DelayMs>
		GPIO_vTogglePinValue(GPIO_A, Pin4);
 8002b50:	e7f6      	b.n	8002b40 <Buzzer_TOG+0x4>
	...

08002b54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b54:	480d      	ldr	r0, [pc, #52]	; (8002b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b5c:	480c      	ldr	r0, [pc, #48]	; (8002b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b5e:	490d      	ldr	r1, [pc, #52]	; (8002b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b60:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <LoopForever+0xe>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b64:	e002      	b.n	8002b6c <LoopCopyDataInit>

08002b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b6a:	3304      	adds	r3, #4

08002b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b70:	d3f9      	bcc.n	8002b66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b72:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b74:	4c0a      	ldr	r4, [pc, #40]	; (8002ba0 <LoopForever+0x16>)
  movs r3, #0
 8002b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b78:	e001      	b.n	8002b7e <LoopFillZerobss>

08002b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b7c:	3204      	adds	r2, #4

08002b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b80:	d3fb      	bcc.n	8002b7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b82:	f000 f811 	bl	8002ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b86:	f7ff fce5 	bl	8002554 <main>

08002b8a <LoopForever>:

LoopForever:
    b LoopForever
 8002b8a:	e7fe      	b.n	8002b8a <LoopForever>
  ldr   r0, =_estack
 8002b8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b94:	20001364 	.word	0x20001364
  ldr r2, =_sidata
 8002b98:	0802cf64 	.word	0x0802cf64
  ldr r2, =_sbss
 8002b9c:	20001364 	.word	0x20001364
  ldr r4, =_ebss
 8002ba0:	20001450 	.word	0x20001450

08002ba4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <BusFault_Handler>
	...

08002ba8 <__libc_init_array>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	4d0d      	ldr	r5, [pc, #52]	; (8002be0 <__libc_init_array+0x38>)
 8002bac:	4c0d      	ldr	r4, [pc, #52]	; (8002be4 <__libc_init_array+0x3c>)
 8002bae:	1b64      	subs	r4, r4, r5
 8002bb0:	10a4      	asrs	r4, r4, #2
 8002bb2:	2600      	movs	r6, #0
 8002bb4:	42a6      	cmp	r6, r4
 8002bb6:	d109      	bne.n	8002bcc <__libc_init_array+0x24>
 8002bb8:	4d0b      	ldr	r5, [pc, #44]	; (8002be8 <__libc_init_array+0x40>)
 8002bba:	4c0c      	ldr	r4, [pc, #48]	; (8002bec <__libc_init_array+0x44>)
 8002bbc:	f000 f818 	bl	8002bf0 <_init>
 8002bc0:	1b64      	subs	r4, r4, r5
 8002bc2:	10a4      	asrs	r4, r4, #2
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	42a6      	cmp	r6, r4
 8002bc8:	d105      	bne.n	8002bd6 <__libc_init_array+0x2e>
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd0:	4798      	blx	r3
 8002bd2:	3601      	adds	r6, #1
 8002bd4:	e7ee      	b.n	8002bb4 <__libc_init_array+0xc>
 8002bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bda:	4798      	blx	r3
 8002bdc:	3601      	adds	r6, #1
 8002bde:	e7f2      	b.n	8002bc6 <__libc_init_array+0x1e>
 8002be0:	0802cf5c 	.word	0x0802cf5c
 8002be4:	0802cf5c 	.word	0x0802cf5c
 8002be8:	0802cf5c 	.word	0x0802cf5c
 8002bec:	0802cf60 	.word	0x0802cf60

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
